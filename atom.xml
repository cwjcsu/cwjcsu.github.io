<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[debug4me | 一叶知秋-博客]]></title>
  <subtitle><![CDATA[码农，程序员，数学物理科幻爱好者]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://debug4.me/"/>
  <updated>2015-10-21T04:49:51.272Z</updated>
  <id>http://debug4.me/</id>
  
  <author>
    <name><![CDATA[debug4me@163.com]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[三分法求极值-Ternary Search]]></title>
    <link href="http://debug4.me/Algorithm/ternary-search/"/>
    <id>http://debug4.me/Algorithm/ternary-search/</id>
    <published>2015-10-21T02:57:53.000Z</published>
    <updated>2015-10-21T04:49:51.272Z</updated>
    <content type="html"><![CDATA[<p>本文介绍了三分法（Ternary Search）的适用场景，并用一道2015百度笔试题讲解三分法，最后分析了三分法和二分法的区别。<br><a id="more"></a></p>
<h2 id="什么是三分法">什么是三分法</h2><p>三分法是求单峰函数的最大值或最小值的算法，是一种<a href="https://en.wikipedia.org/wiki/Divide_and_conquer_algorithm" target="_blank" rel="external">分治算法</a>。维基百科：<a href="https://en.wikipedia.org/wiki/Ternary_search" target="_blank" rel="external">Ternary_search</a>。</p>
<p>所谓单峰函数，就是凸函数（包括上凸和下凸，严格定义不赘述）。举个例子，假设求函数f(x)的最大值，而且最大值落在区间[A,B]上，为了使用三分法，那么必须存在一个x满足下面的条件：</p>
<ul>
<li>对任意a,b，如果 A ≤ a &lt; b ≤ x ,则f(a) &lt; f(b)，并且</li>
<li>对任意a,b，如果 x ≤ a &lt; b ≤ B，则f(a) &gt; F(b)<br>这样，f(x)就是函数f的最大值。 </li>
</ul>
<h2 id="算法描述">算法描述</h2><p>假设函数f(x)在区间[A,B]上有最大值，那么随机取两个点m1和m2 : A &lt; m1 &lt; m2 &lt; B,然后有三种可能：<br>if f(m1) &lt; f(m2) ,那么最大值不可能在区间[A,m1]上，而是落在(m1,B]上；<br>if f(m1) &gt; f(m2) ,那么最大值不可能再区间[m2,B]上，而是落在[A,m2)上；<br>if f(m1) = f(m2) ,那么最大值落在区间[m1,m2]上。</p>
<p><strong>注意</strong>:上面区间的表示法，用’(‘和’)’表示不包含端点，用’[‘和’]’表示包含端点。</p>
<p>上面每次选取m1,m2可以排除一块区间，即每次划分成三份，根据函数值去掉一份或者两份，正所谓三分法也。<br>每次可以三等分，即m1和m2的选取可以这样：</p>
<ul>
<li>m1 = A + (A-B)/3</li>
<li>m2 = B - (A-B)/3</li>
</ul>
<p>时间复杂度：Ｏ(log n)</p>
<p>三分法示意图:<br><img src="http://7xn1o8.com1.z0.glb.clouddn.com/ternary_search.png" alt="三分法算法示意图"></p>
<h2 id="实例">实例</h2><h3 id="2015百度笔试题（算法）">2015百度笔试题（算法）</h3><p>题目：一个升序数组，可能包含正数负数或者0，求数组中绝对值最小的数，要求复杂度小于O(n)。</p>
<p>题目被发到<a href="http://group.jobbole.com/9254" target="_blank" rel="external">伯乐在线 - 2015百度笔试题（算法）</a>。</p>
<h3 id="分析">分析</h3><p>有序数组搜索一个元素，经验主义者会立刻想到二分法，殊不知，本题是求绝对值，数组的绝对值不再是有序的，而是下凸的，即中间小，两边大。所求的正好是最小值。能满足三分法的要求。</p>
<h3 id="示例代码">示例代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 用三分法求升序数组data中绝对值最小的元素。如果有两个绝对值相等，返回值小的那一个。</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMinAbs</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = data.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m1 = left;</span><br><span class="line">    <span class="keyword">int</span> m2 = right;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        m1 = left + (right - left) / <span class="number">3</span>;</span><br><span class="line">        m2 = right - (right - left) / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> f1 = Math.<span class="built_in">abs</span>(data[m1]);</span><br><span class="line">        <span class="keyword">int</span> f2 = Math.<span class="built_in">abs</span>(data[m2]);</span><br><span class="line">        <span class="keyword">if</span> (f1 &gt; f2) &#123;<span class="comment">//缩小到区间(m1,right]</span></span><br><span class="line">            left = m1 + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f1 &lt; f2) &#123;<span class="comment">//缩小到区间[left,m2)</span></span><br><span class="line">            right = m2 - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//缩小到区间[m1,m2]</span></span><br><span class="line">            left = m1;</span><br><span class="line">            right = m2;</span><br><span class="line">            <span class="keyword">if</span> (left == right - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//TODO这里是发现了两个最小值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data[left];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; -<span class="number">123</span>, -<span class="number">23</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">100</span> &#125;;</span><br><span class="line">    System.out.println(findMinAbs(data));</span><br><span class="line">    data = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; -<span class="number">123</span>, -<span class="number">23</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">100</span> &#125;;</span><br><span class="line">    System.out.println(findMinAbs(data));</span><br><span class="line">    data = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">12</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>,<span class="number">112</span>, <span class="number">125</span>, <span class="number">1100</span> &#125;;</span><br><span class="line">    System.out.println(findMinAbs(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"><span class="number">1</span></span><br><span class="line"></span>-<span class="ruby"><span class="number">1</span></span><br><span class="line"></span>12</span><br></pre></td></tr></table></figure></p>
<h2 id="与二分法的区别">与二分法的区别</h2><p>二分法适用的场景是：从一个有序数组中寻找指定值的元素。二分法适用的是有序数组，三分法适用的是先升后降或者先降后升的数组。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文介绍了三分法（Ternary Search）的适用场景以及与二分法的区别]]>
    
    </summary>
    
      <category term="三分法" scheme="http://debug4.me/tags/%E4%B8%89%E5%88%86%E6%B3%95/"/>
    
      <category term="分治算法" scheme="http://debug4.me/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
      <category term="搜索算法" scheme="http://debug4.me/tags/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    
      <category term="Algorithm" scheme="http://debug4.me/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Euler Problem 134 - Prime pair connection]]></title>
    <link href="http://debug4.me/Project-Euler/PE134/"/>
    <id>http://debug4.me/Project-Euler/PE134/</id>
    <published>2015-10-19T11:36:36.000Z</published>
    <updated>2015-10-20T06:14:35.216Z</updated>
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=134" target="_blank" rel="external">Project Euler 134</a> ,求以整数p1结尾，且整除另一个整数p2的数。<em>Completed on 2015-10-19  16:42</em><br><a id="more"></a></p>
<h2 id="原题">原题</h2><p>Consider the consecutive primes p1 = 19 and p2 = 23. It can be verified that 1219 is the smallest number such that the last digits are formed by p1 whilst also being divisible by p2.</p>
<p>In fact, with the exception of p1 = 3 and p2 = 5, for every pair of consecutive primes, p2 &gt; p1, there exist values of n for which the last digits are formed by p1 and n is divisible by p2. Let S be the smallest of these values of n.</p>
<p>Find ∑ S for every pair of consecutive primes with 5 ≤ p1 ≤ 1000000.</p>
<p>对于连续素数对p1,p2，存在一个整数n，满足：n以p1结尾，而且n整除p2。设S为满足条件的n中的最小值，求∑ S，使得 5 ≤ p1 ≤ 1000000</p>
<h2 id="分析">分析</h2><p>根据条件“n以p1结尾”可以得出：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">n = <span class="literal">p1</span> + k*n0         （<span class="number">1</span>）</span><br></pre></td></tr></table></figure></p>
<p>其中n0是满足n0 &gt; p1的10的最小幂，k是整数。很自然可以想到从1循环k，根据（1）式求得n，然后检验n是否整除p2。于是得到</p>
<h3 id="穷举法">穷举法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * get the min integer n which endWiths p1 and can be divided by p2</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getProductEndWith</span><span class="params">(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = Util.getSize(p1);</span><br><span class="line">    <span class="keyword">long</span> n0 = (<span class="keyword">long</span>) Math.<span class="built_in">pow</span>(<span class="number">10</span>, size);</span><br><span class="line">    <span class="keyword">long</span> n = p1 + n0;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % p2 == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        n += n0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法搜索5 ~ 1000000以内的素数，花费时间大概是5分钟左右。</p>
<h2 id="利用乘法竖式">利用乘法竖式</h2><p>回忆两个整数相乘时是如何进位和相加的，举例说明，对于p1=101,p2=103,乘法算式如下:<br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">   1   0   3</span></span><br><span class="line">...x3  x2  x1</span><br><span class="line"><span class="blockquote">______________________</span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line">_______________________</span></span><br><span class="line">...1   0    1</span><br></pre></td></tr></table></figure></p>
<p>中间用”…”省略未知的数字和运算过程。</p>
<h3 id="迭代_step1">迭代 step1</h3><p>由于3*x1 的个位数是1，即3*x1 % 10 = 1，于是得到x1=7，于是103 * 7 = 721<br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">   1   0   3</span></span><br><span class="line">...x3  x2  7</span><br><span class="line"><span class="blockquote">______________________</span><br><span class="line">   7   2   1</span><br><span class="line">   ....</span><br><span class="line">_______________________</span></span><br><span class="line">...1   0    1</span><br></pre></td></tr></table></figure></p>
<h3 id="迭代step2">迭代step2</h3><p>由于 3 * x2 + 2 的个位数是0，从而得出x2 = 6 :<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">   <span class="number">1</span>   <span class="number">0</span>   <span class="number">3</span></span><br><span class="line">...x3  <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">______________________</span><br><span class="line">   <span class="number">7</span>   <span class="number">2</span>   <span class="number">1</span></span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>   <span class="number">8</span>    </span><br><span class="line">   ....</span><br><span class="line">_______________________</span><br><span class="line">..<span class="number">.1</span>   <span class="number">0</span>    <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>整理得到：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">   <span class="number">1</span>   <span class="number">0</span>   <span class="number">3</span></span><br><span class="line">...x3  <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">______________________</span><br><span class="line"><span class="number">6</span>  <span class="number">9</span>   <span class="number">0</span>   <span class="number">1</span>         </span><br><span class="line">....</span><br><span class="line">_______________________</span><br><span class="line">..<span class="number">.1</span>   <span class="number">0</span>    <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h3 id="迭代_step3">迭代 step3</h3><p>由于 3 * x3 +9 的个位数是1，从而得到x3 = 4，带入上面竖式得到：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">      <span class="number">1</span>   <span class="number">0</span>   <span class="number">3</span></span><br><span class="line">   ..<span class="number">.4</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">   ______________________</span><br><span class="line">   <span class="number">6</span>  <span class="number">9</span>   <span class="number">0</span>   <span class="number">1</span>         </span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">   _______________________</span><br><span class="line"><span class="number">4</span>  <span class="number">8</span>  <span class="number">1</span>   <span class="number">0</span>    <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>经过3次迭代得到n= 48101 = 467 * 103 满足条件。</p>
<h3 id="因数表">因数表</h3><p>上面根据个位上的数字确定因数的方法可以做一张10x10的因数表（不是九九乘法表），代码如下：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> <span class="bullet">* 因子multiplier[i][j] = k,满足 j = i *</span> k % 10</span><br><span class="line"> */</span><br><span class="line">public static int[<span class="link_label"></span>][<span class="link_reference"></span>] multiplier = new int[<span class="link_label">10</span>][<span class="link_reference">10</span>];</span><br><span class="line">static &#123;</span><br><span class="line"><span class="code">    for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="code">        for (int k = 0; k &lt; 10; k++) &#123;</span></span><br><span class="line"><span class="code">            int j = i * k % 10;</span></span><br><span class="line"><span class="code">            multiplier[i][j] = k;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>核心代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * get the minimum integer n which endWiths p1 and can be divided by p2</span><br><span class="line"> * </span><br><span class="line"> * @param p1</span><br><span class="line"> * @param p2</span><br><span class="line"> * @return</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getProductEndWith</span><span class="params">(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = getRightmostKthDigit(p2, <span class="number">0</span>);<span class="comment">// rightmost digit of p2</span></span><br><span class="line">    <span class="keyword">long</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> L = ((<span class="keyword">int</span>) Math.<span class="built_in">log10</span>(p1)) + <span class="number">1</span>;<span class="comment">// size of digits of p1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; L; k++) &#123;<span class="comment">// from the rightmost xth</span></span><br><span class="line">        <span class="comment">// (10 + p1右起第k位 - n右起第k位 )%10得到这次乘积的个位数字j</span></span><br><span class="line">        <span class="keyword">int</span> j = (<span class="number">10</span> + getRightmostKthDigit(p1, k) - getRightmostKthDigit(n, k)) % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">long</span> m = multiplier[i][j];<span class="comment">// 乘积的各位数字是j，一个因子是i，则另一个因子是m</span></span><br><span class="line">        n += p2 * (m * (<span class="keyword">int</span>) Math.<span class="built_in">pow</span>(<span class="number">10</span>, k));<span class="comment">// 因子m在k位上，所以要乘10^k然后加到n</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从p1=5开始累加：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">int</span> L = BigInteger.valueOf(<span class="number">1000000</span>).nextProbablePrime().intValue();<span class="comment">// 1000003</span></span><br><span class="line">    <span class="keyword">int</span>[] primes = Util.getPrimesBlow(L);<span class="comment">// last 2 is 999983,1000003</span></span><br><span class="line">    <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    System.out.println(getProductEndWith(<span class="number">999983</span>, <span class="number">1000003</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= primes.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> p1 = primes[i];</span><br><span class="line">        <span class="keyword">int</span> p2 = primes[i + <span class="number">1</span>];</span><br><span class="line">        sum += Util.getProductEndWith(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    System.out.println(<span class="string">"Time consumed:"</span> + (System.currentTimeMillis() - s) + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="输出">输出</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">18613426663617118</span></span><br><span class="line">Time consumed:<span class="number">100</span> ms</span><br></pre></td></tr></table></figure>
<h2 id="利用中国剩余定理_（孙子定理）">利用中国剩余定理  （孙子定理）</h2><p>在<a href="https://projecteuler.net/thread=134" target="_blank" rel="external">Thread 134 -Project Euler</a>里面有看到使用ChineseRemainder算法，时间在20s内，但是没有看懂，以后有时间再研究。<br>TODO</p>
]]></content>
    <summary type="html">
    <![CDATA[Project Euler 134 - 求以整数p1结尾，且整除另一个整数p2的数]]>
    
    </summary>
    
      <category term="Chinese remainder theorem" scheme="http://debug4.me/tags/Chinese-remainder-theorem/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/tags/Project-Euler/"/>
    
      <category term="中国剩余定理" scheme="http://debug4.me/tags/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
      <category term="素数" scheme="http://debug4.me/tags/%E7%B4%A0%E6%95%B0/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/categories/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无穷大——你从没听说过的事情 Infinity - You've Never Heard of]]></title>
    <link href="http://debug4.me/Math/infinity-you-never-heard-of/"/>
    <id>http://debug4.me/Math/infinity-you-never-heard-of/</id>
    <published>2015-10-18T16:00:20.000Z</published>
    <updated>2015-10-20T01:20:12.295Z</updated>
    <content type="html"><![CDATA[<p>本文从原理上探讨集合的基数，以及无穷大的分类依据。<br><a id="more"></a></p>
<h2 id="关于计数">关于计数</h2><p>据考古证据显示，原始非洲部落的人对超过3的数是数不清楚的。就是说如果一个人他有4个儿子，他只会说有很多儿子，而不是4个。</p>
<p>虽然原始人不会计数，但当数目比较多时，他们可以判断一个东西的个数是否比另一个东西多。而这条能被原始人理解使用的简单原理也是理解几类无穷大的关键。</p>
<h3 id="原始人怎么比较呢？">原始人怎么比较呢？</h3><p>假设有一堆珠宝和一堆石头，要比较那一堆数目多，只需要每次从珠宝和石头中各拿出来一个，放到其他地方，一直拿，最终会有三种情况：</p>
<ol>
<li>珠宝拿完了剩下了石头；</li>
<li>石头拿完了剩下了珠宝；</li>
<li>珠宝和石头同时都没有了。<br>显然，第一种情况石头比珠宝多，第二种情况珠宝比石头多，第三种情况珠宝石头一样多。</li>
</ol>
<h3 id="集合的基数">集合的基数</h3><p>集合A和集合B有相同的基数，当且仅当存在从A到B的一一对应。<br><strong>什么是一一对应呢？</strong>如果你不知道，那高中数学的函数那一章你不可能及格。假设上面的珠宝集合是A，石头集合是B，</p>
<ul>
<li>每拿掉一块珠宝，必须拿掉且仅拿掉一块石头;</li>
<li>拿掉的珠宝和石头不能重新放进去；</li>
<li>珠宝拿完以后，石头也恰好拿完。<br>满足上面三个条件，就可以称A-&gt; B存在一个一一对应 （也称为 一一映射）。</li>
</ul>
<h3 id="可数集合">可数集合</h3><p>有限集合以及与自然数集合基数相同的集合都称为<strong>可数集合</strong>，其他的集合均是不可数集合。</p>
<p>可数集合包括第一类基数<strong>无穷大</strong>集合 - 零级无穷大。</p>
<h2 id="零级无穷大_-_整数个数">零级无穷大  - 整数个数</h2><h3 id="什么是无穷大？">什么是无穷大？</h3><p>∞,infinity.简单的说，就是你比任何一个数都大。其实无穷大也是一个数，但你写不出来，它大到什么程度呢？想象一下地球上所有沙子的数目，无穷大比它要大，再大一点，地球上所有原子的数目，无穷大比它还要大。</p>
<p>既然无穷大比任何数都大，那它和自己相比呢？是什么情况。我们知道，所有整数的个数是无穷大，所有偶数的个数也是无穷大，但整数包含奇数和偶数，那你觉得是整数多还是偶数多？如果你不加思索仅凭直觉，你可能会认为整数比偶数多，毕竟整数还包含奇数。</p>
<p>正确答案是：<strong>整数和偶数一样多。</strong> 为什么？<br><strong>比较两个无穷大是否相等，关键看它们之间能否建立一个一一对应。 </strong><br>我们学一学非洲原始人吧，把整数和偶数分成两堆。从偶数里面拿掉2，相应的从整数里面拿掉1；从偶数里面拿掉4，相应的从整数里面拿掉2；…；从偶数里面拿掉n，从整数里面拿掉n/2…只要你从偶数里面拿掉任何一个，总是能从整数里面也拿掉一个，就是它除以2；相反，你从整数里面拿掉任意一个数m，对应的总是可以从偶数里面也拿掉一个数，就是2m。这样，所有整数和所有偶数就建立了一个对应一一对应关系，不重复不遗漏，所以这两个集合的基数相同。</p>
<h2 id="一级无穷大_-_实数个数">一级无穷大  - 实数个数</h2><p>问：<strong>一条长度为1的线段上面的点数与整数个数那个大？</strong><br>我们试着建立一个整数到点的一一对应：线段上的每一个点都可以表示为点到端点的距离，它是一个小数，比如0.72134355451…假设我们找到了一个一一对应,它是这样的：<br><img src="http://7xn1o8.com1.z0.glb.clouddn.com/infinity1.png" alt="任意假定的整数到实数的一一对应"><br>看到这个映射以后，我们还可以写出无穷多个不在这个表格里面的小数，怎么写呢？让这个小数的第一个小数位不同于表中第一个小数的第一个小数位，让它的第二个小数位不同于表中第二个小数的第二个小数位,…，例如，可以写出下面的小数：<br><img src="http://7xn1o8.com1.z0.glb.clouddn.com/infinity2.png" alt="找出一个不在上述映射表中的实数"><br>这个数无论如何在上表中是找不到的。这样一一对应就建立不起来。所以这条线段上的点数比整数的个数还要多得多。这就是两类不同的无穷大。</p>
<p>那么，长度为1的线段和长度为2的线段，谁的点多呢？这就跟整数与偶数的比较一样，是一样多的。一一对应很简单：x-&gt; 2x。实际上，不管线段多长，它与长度为1的线段可以建立下面的投影关系：<br><img src="http://7xn1o8.com1.z0.glb.clouddn.com/infinity3.png" alt="长度不同的线段建立一一对应"></p>
<p>长度为1的线段与边长为1的正方形的点数是一样多的吗？是的：<br><img src="http://7xn1o8.com1.z0.glb.clouddn.com/infinity4.png" alt="边长为1的正方形与长度为1的线段建立一一对应"></p>
<p>同样的，立方体内所有的点数和正 方形或线段上的所有点数相等，只要把代表线段上一个点的无穷小数分作三部分：<br><img src="http://7xn1o8.com1.z0.glb.clouddn.com/infinity5.png" alt="边长为1的立方体与长度为1的线段建立一一对应"></p>
<h2 id="二级无穷大">二级无穷大</h2><p>上面两种，分别称为0级和1级无穷大。那有没有比线段上的点还要多的无穷大呢？有，那就是所有曲线的数目，称为2级无穷大。目前只发现这三类无穷大（意思是可以被描述和表达出来的）。</p>
<p><strong>有没有比三类无穷大都大的无穷大？</strong><br>有，见下文；<br><strong>三类无穷的夹层中间有没有其他无穷大？</strong><br>不存在。</p>
<h2 id="小结">小结</h2><ul>
<li>零级无穷大：所有整数的数量</li>
<li>一级无穷大：所有小数的数量（等于上面提及的线上所有的点数、面上所有的点数、立方体上所有的点数）</li>
<li>二级无穷大：在一张纸上随意地画线条，所有可能画出的线条数目（曲线样式的数目）</li>
</ul>
<p>零级无穷大 &lt; 一级无穷大 &lt; 二级无穷大</p>
<h3 id="三类无穷大的关系">三类无穷大的关系</h3><p>可以证明：<strong>任何一个集合的所有子集所形成的集合的大小比原集合大。</strong></p>
<p><strong>最大的无穷大是多大呢？</strong><br>答案是没有尽头。</p>
<p>事实上，[0,1）上的实数可以和正整数的所有子集的集合建立一一对应。</p>
<p>把这些实数写成二进制。小数点后第n位为1，对应n在子集中，为0对应不在子集中，这样[0,1)上的实数就和正整数的子集有了一一对应，因此实数和正整数集的所有子集的个数一样多。</p>
<p>也可以证明前面所说曲线可以和实数集的所有子集有一一对应关系。<br>我们把前面说所曲线看成一个集合，他的所有子集的个数又将比这个集合大。这个过程可以一直进行下去，得到越来越大的无穷大。<br>　　另外还有一个问题，整数的无穷大和实数的无穷大之间存不存在别的无穷大。也就是说，是否存在比整数的无穷大大，而比实数的无穷大小的无穷大。（连续统假设）<br>在现有集合公理下面，至今无法证明或证伪。</p>
<h3 id="参考文档">参考文档</h3><p><a href="http://baike.baidu.com/view/530029.htm" target="_blank" rel="external">无穷大 - 百度百科</a><br><a href="https://zh.wikipedia.org/zh/%E6%97%A0%E7%A9%B7" target="_blank" rel="external">无穷 - 维基百科</a><br><a href="">《从1到无穷大-科学中的事实与臆测》</a></p>
]]></content>
    <summary type="html">
    <![CDATA[关于三类无穷大的讨论]]>
    
    </summary>
    
      <category term="一一对应" scheme="http://debug4.me/tags/%E4%B8%80%E4%B8%80%E5%AF%B9%E5%BA%94/"/>
    
      <category term="基数" scheme="http://debug4.me/tags/%E5%9F%BA%E6%95%B0/"/>
    
      <category term="无穷大" scheme="http://debug4.me/tags/%E6%97%A0%E7%A9%B7%E5%A4%A7/"/>
    
      <category term="集合论" scheme="http://debug4.me/tags/%E9%9B%86%E5%90%88%E8%AE%BA/"/>
    
      <category term="Math" scheme="http://debug4.me/categories/Math/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Euler Problem 387 - Harshad Numbers]]></title>
    <link href="http://debug4.me/Project-Euler/PE387/"/>
    <id>http://debug4.me/Project-Euler/PE387/</id>
    <published>2015-10-12T11:33:56.000Z</published>
    <updated>2015-10-13T09:12:24.247Z</updated>
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=387" target="_blank" rel="external">Project Euler Problem 387</a> - Find the sum of the strong, right truncatable Harshad primes less than 10<sup>14</sup> ,<em>Completed on 2015-10-11  23:41</em><br><a id="more"></a></p>
<h2 id="原题">原题</h2><p>A Harshad or Niven number is a number that is divisible by the sum of its digits.<br>201 is a Harshad number because it is divisible by 3 (the sum of its digits.)<br>When we truncate the last digit from 201, we get 20, which is a Harshad number.<br>When we truncate the last digit from 20, we get 2, which is also a Harshad number.<br>Let’s call a Harshad number that, while recursively truncating the last digit, always results in a Harshad number a right truncatable Harshad number.</p>
<p>Also:<br>201/3=67 which is prime.<br>Let’s call a Harshad number that, when divided by the sum of its digits, results in a prime a strong Harshad number.</p>
<p>Now take the number 2011 which is prime.<br>When we truncate the last digit from it we get 201, a strong Harshad number that is also right truncatable.<br>Let’s call such primes strong, right truncatable Harshad primes.</p>
<p>You are given that the sum of the strong, right truncatable Harshad primes less than 10000 is 90619.</p>
<p>Find the sum of the strong, right truncatable Harshad primes less than 10<sup>14<sup>.</sup></sup></p>
<h2 id="分析">分析</h2><h3 id="Harshad_Numbers(哈沙德数)"><a name="Harshad_number"></a><a href="https://en.wikipedia.org/wiki/Harshad_number" target="_blank" rel="external">Harshad Numbers</a>(<a href="http://baike.baidu.com/view/1745210.htm" target="_blank" rel="external">哈沙德数</a>)</h3><p>是可以在某个固定的进位制中,被其数位的数字之和整除的整数。</p>
<ul>
<li><p><a name="right_truncatable_Harshadnumber"></a>right truncatable Harshad number :循环截掉哈沙德数右边一个数字，新数字还是哈沙德数</p>
</li>
<li><p><a name="strong_Harshad_number"></a>strong Harshad number:如果哈沙德数与它的各位数字之和的比值是素数。</p>
</li>
<li><p><a name="strong_Harshad_prime"></a>strong, right truncatable Harshad primes<br>是这样一类素数，去掉最后一个数字后，是一个<a href="#strong_Harshad_number">strong Harshad number</a>也是一个<a href="#right_truncatable_Harshadnumber">right truncatable Harshad number</a></p>
</li>
</ul>
<p>穷举法有两条思路：</p>
<ul>
<li>思路一：基于素数搜索。<br>  从11开始遍历下一个素数，判断它是不是满足<a href="#strong_Harshad_prime">条件</a>的素数，把满足条件的素数相加直到10<sup>14</sup>;</li>
<li>思路二：基数哈沙德数搜索。<br>  从数字1 ~ 9开始(1 ~ 9都是哈沙德数)，深度遍历搜索哈沙德数，在哈沙德数基础上递归搜索这个数末尾加上0~9之后是否素数，是否是哈沙德数，以此遍历下去。每次在末尾添加0 ~ 9 可以保证哈沙德数都是right truncatable的，无需而外运算。</li>
</ul>
<p>实践证明，思路一不可行，10<sup>14</sup>以内的素数不是短时间内可以遍历完的，而且对每个素数进行条件判断也比较耗时。思路二可行。</p>
<h2 id="解题">解题</h2><h3 id="基数哈沙德数深度优先搜索">基数哈沙德数深度优先搜索</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">static long <span class="keyword">N</span> = (long) Math.pow(10, 14);</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 按照 Truncatable HarshadNumber遍历：</span><br><span class="line">     * @param n a Right Truncatable HarshadNumber</span><br><span class="line">     * @param ds sum of digits of n</span><br><span class="line">     * @param strong n is strong HarshadNumber</span><br><span class="line">     * @return 以n为前缀的所有StrongRightTruncatableHarshad素数之和</span><br><span class="line">     */</span></span><br><span class="line">    public static long sumHarshadNumber(long <span class="keyword">n</span>, int <span class="keyword">ds</span>, boolean strong) &#123;</span><br><span class="line">        <span class="keyword">n</span> = <span class="keyword">n</span> * 10;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">n</span> &gt;= <span class="keyword">N</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> 0;</span><br><span class="line">        &#125;</span><br><span class="line">        long <span class="keyword">sum</span> = 0;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt;= 9; i++) &#123;</span><br><span class="line">            <span class="keyword">n</span> += i; <span class="comment">// new n</span></span><br><span class="line">            <span class="keyword">ds</span> += i;<span class="comment">// new ds</span></span><br><span class="line">            <span class="keyword">if</span> (strong &amp;&amp; Util.isProbablePrime(<span class="keyword">n</span>, 100)) &#123;<span class="comment">// new n is prime</span></span><br><span class="line">                <span class="keyword">sum</span> += <span class="keyword">n</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">n</span> % <span class="keyword">ds</span> == 0) &#123; <span class="comment">// new n is a Right Truncatable HarshadNumber,recursive</span></span><br><span class="line">                <span class="keyword">sum</span> += sumHarshadNumber(<span class="keyword">n</span>, <span class="keyword">ds</span>, Util.isProbablePrime(<span class="keyword">n</span> / <span class="keyword">ds</span>, 100));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">n</span> -= i;<span class="comment">// restore n</span></span><br><span class="line">            <span class="keyword">ds</span> -= i;<span class="comment">// restore ds</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">sum</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>Util.isProbablePrime</code> 如下：<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 判断v是否可能是素数，是素数的概率为：1-1/2^certainty</span><br><span class="line"> * <span class="doctag">@return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isProbablePrime</span><span class="params">(<span class="keyword">long</span> v, <span class="keyword">int</span> certainty)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BigInteger.valueOf(v).isProbablePrime(certainty);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="求和">求和</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> s = System.nanoTime();</span><br><span class="line">    System.out.println(sumHarshadNumbes());</span><br><span class="line">    System.out.println(<span class="string">"Time consumed : "</span> + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - s) + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sumHarshadNumbers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        sum += sumHarshadNumber(i, i, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出">输出</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">696067597313468</span></span><br><span class="line">Time consumed : <span class="number">168</span> ms</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[Project Euler Problem 387 - Harshad Numbers]]>
    
    </summary>
    
      <category term="Harshad number" scheme="http://debug4.me/tags/Harshad-number/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/tags/Project-Euler/"/>
    
      <category term="哈沙德数" scheme="http://debug4.me/tags/%E5%93%88%E6%B2%99%E5%BE%B7%E6%95%B0/"/>
    
      <category term="尼云数" scheme="http://debug4.me/tags/%E5%B0%BC%E4%BA%91%E6%95%B0/"/>
    
      <category term="数论" scheme="http://debug4.me/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="深度遍历" scheme="http://debug4.me/tags/%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86/"/>
    
      <category term="素数" scheme="http://debug4.me/tags/%E7%B4%A0%E6%95%B0/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/categories/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo建立github,gitcafe博客并实时同步的要点]]></title>
    <link href="http://debug4.me/%E5%B7%A5%E5%85%B7/hexo-github-gitcafe/"/>
    <id>http://debug4.me/工具/hexo-github-gitcafe/</id>
    <published>2015-10-11T05:40:51.000Z</published>
    <updated>2015-10-12T02:46:49.863Z</updated>
    <content type="html"><![CDATA[<p>把hexo博客的源码和生成的页面实时同步到github和gitcafe。<br><a id="more"></a></p>
<p>用搜索引擎搜索”github 博客”等关键字会出现大量很好的文章教小白一步步搭建。我这里列出一些关键点，希望可以让你少走弯路。这篇博客的markdown源代码在：<a href="https://gitcafe.com/cwjcsu/cwjcsu/blob/master/source/_posts/hexo-github-gitcafe.md" target="_blank" rel="external">https://gitcafe.com/cwjcsu/cwjcsu/blob/master/source/_posts/hexo-github-gitcafe.md</a><br>其他涉及的源码在同一个仓库可以找到。</p>
<h2 id="1，_不一定要购买域名">1， 不一定要购买域名</h2><p>很多文章都有介绍购买域名，并在根目录下配置CName文件，其实不一定要购买的。Github会给每个用户一个二级域名:cwjcsu.github.io。这个二级域名下，你可以定制样式、404页面等等，记住最重要的一点：你创建的github的仓库名称必须是cwjcsu.github.io,这样你只要在master分支上 仓库根目录push一个index.html，这个页面就可以通过 <a href="http://cwjcsu.github.io" target="_blank" rel="external">http://cwjcsu.github.io</a> 访问到。cwjcsu是我的github用户名，实际操作中替换成你的即可。</p>
<h2 id="2，使用gh_pages分支创建的页面">2，使用gh_pages分支创建的页面</h2><p>在github上，你可以为你的任何仓库添加一个网站，你只需要：</p>
<ol>
<li>把网站的页面push到这个仓库的gh_pages分支；（github有向导可以指引你自动创建这个分支）</li>
<li>通过<a href="http://username.github.io/reponame" target="_blank" rel="external">http://username.github.io/reponame</a> 进行访问（即<code>http://博客地址/仓库名称/</code>）。我的github博客地址是：<a href="http://cwjcsu.github.io/" target="_blank" rel="external"><code>http://cwjcsu.github.io/</code></a>，而joutable是我一个开源项目的仓库名称，它的页面可以通过<a href="http://cwjcsu.github.io/joutable" target="_blank" rel="external">http://cwjcsu.github.io/joutable</a> 访问到</li>
</ol>
<h2 id="3，举例说明">3，举例说明</h2><p>我在github上面的首页是：<a href="https://github.com/cwjcsu" target="_blank" rel="external">https://github.com/cwjcsu</a><br>我在github上的博客源码仓库是：<a href="https://github.com/cwjcsu/cwjcsu.github.io" target="_blank" rel="external">https://github.com/cwjcsu/cwjcsu.github.io</a><br>我在github上博客首页：<a href="http://cwjcsu.github.io" target="_blank" rel="external">http://cwjcsu.github.io</a><br>我的一个开源项目joutable仓库是：<a href="https://github.com/cwjcsu/joutable" target="_blank" rel="external">https://github.com/cwjcsu/joutable</a> ，有两个分支，一个是master放置开源项目源码，一个是gh_pages放置项目介绍页面可以通过<a href="http://cwjcsu.github.io/joutable/" target="_blank" rel="external">http://cwjcsu.github.io/joutable/</a> 访问</p>
<h2 id="4，hexo搭建">4，hexo搭建</h2><p>hexo主页：<a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a><br>经过试用，hexo用来写博客真是不二选择（配合<a href="http://www.sublimetext.com/3" target="_blank" rel="external">sublime Text3</a> +<a href="http://www.cnblogs.com/IPrograming/p/Sublime-markdown-editor.html" target="_blank" rel="external">Markdown Editing</a>,），具有下面的优势：</p>
<ol>
<li>使用markdown，完美支持github-flavored-markdown</li>
<li>实时本地预览，（#hexo s 创建一个本地http-server在本地实时预览你的博客网站）</li>
<li>大量丰富的主题模版(<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a>)</li>
<li>支持Tex语法(通过mathjax:<a href="https://www.mathjax.org" target="_blank" rel="external">https://www.mathjax.org</a> )</li>
<li>一键部署到多个站点（这个是我自己写的git脚本，下面有介绍）</li>
</ol>
<p>使用hexo需要安装nodejs，npm，以及其他的依赖工具，网上教程不少，本文不赘述（遇到问题可以给我留言），不过特别提醒以下几点：</p>
<ol>
<li>.yml 配置文件采用缩进进行分开，key和value之间至少要有一个空格；</li>
<li>如果hexo生成的html里面有乱码，那是对应的源文件没有用UTF-8保存，你可以使用nodepadd++或者记事本把他们保存为UTF-8，然后重新生成即可；</li>
<li>使用<code>&lt;!--more--&gt;</code>用来分割摘要和正文，上面部分是摘要，会出现在主页。同wordpress。</li>
<li>description:xxx 会生成网页的description描述:<code>&lt;meta property=&quot;og:description&quot; content=&quot;xxx&quot;&gt;</code>这是SEO需要注意的地方。</li>
</ol>
<h3 id="推荐几篇好文章：">推荐几篇好文章：</h3><p>hexo搭建博客：<a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">http://www.cnblogs.com/zhcncn/p/4097881.html</a><br>hexo的Jacman主题：<a href="https://github.com/wuchong/jacman" target="_blank" rel="external">https://github.com/wuchong/jacman</a><br>hexo配置介绍：<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">https://hexo.io/docs/configuration.html</a><br>markdown大全：<a href="http://cwjcsu.gitcafe.io/2015/09/26/markdown-learning/" target="_blank" rel="external">http://cwjcsu.gitcafe.io/2015/09/26/markdown-learning/</a> </p>
<h2 id="5，hexo部署">5，hexo部署</h2><p>在hexo配置文件_config.yml 有个deploy的配置项目用来配置git仓库，注意type需设置为git，是hexo3中的类型，需要安装：hexo-deployer-git：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>网上的教程大多是hexo2的，很多文章没有指出这个区别。</p>
<p>#hexo deploy 可以一键部署到github仓库，但是我需要部署到不同仓库，所以没有采用hexo的自动部署，二是写了一个脚本：<br>在hexo生成的博客根目录cwjcsu.github.io下有个脚本：up.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">git commit -am <span class="string">"<span class="variable">$1</span>"</span> </span><br><span class="line">git push github master:master </span><br><span class="line">git push gitcafe master:gitcafe-pages</span><br></pre></td></tr></table></figure>
<p>于是，可以通过下面命令一键把生成的博客内容更新到github和gitcafe了。<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#./up<span class="class">.sh</span> <span class="string">"commit comment"</span></span><br></pre></td></tr></table></figure></p>
<p> 下面是我的git配置文件：cwjcsu.github.io/.git/config</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">    repositoryformatversion = <span class="number">0</span></span><br><span class="line">    filemode = <span class="keyword">false</span></span><br><span class="line">    bare = <span class="keyword">false</span></span><br><span class="line">    logallrefupdates = <span class="keyword">true</span></span><br><span class="line">    symlinks = <span class="keyword">false</span></span><br><span class="line">    ignorecase = <span class="keyword">true</span></span><br><span class="line">    hideDotFiles = dotGitOnly</span><br><span class="line"></span><br><span class="line">[remote <span class="string">"gitcafe"</span>]</span><br><span class="line">    url = git<span class="variable">@gitcafe</span>.<span class="symbol">com:</span>cwjcsu/cwjcsu.git</span><br><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/gitcafe/*</span></span><br><span class="line"></span><br><span class="line">[remote <span class="string">"github"</span>]</span><br><span class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>cwjcsu/cwjcsu.github.io.git</span><br><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/github/*</span></span><br><span class="line">    </span><br><span class="line">[branch <span class="string">"master"</span>]</span><br><span class="line">    remote = github</span><br><span class="line">    merge = refs/heads/master</span><br></pre></td></tr></table></figure>
<p> 可以看到有两个remote：github和gitcafe，分别配置github和gitcafe上面我的博客所在的仓库地址。up.sh脚本中gitcafe的分支是gitcafe-pages而不是master，仓库名称也不是域名而是直接用户名。这是因为gitcafe博客与github博客略有不同，下面会介绍。<br> 为了避免每次push都提示你输入用户名和密码，你需要在github和gitcafe中添加你的公钥，具体操作本文不赘述。[user]部分我没有贴出来。</p>
<h2 id="6,gitcafe博客">6,gitcafe博客</h2><p> 与github不同的是，创建gitcafe的博客，<strong>你只需要创建一个和你的用户名一样的仓库，然后把页面push到这个仓库的gitcafe-pages分支即可</strong>，然后把源码push到这个分支的master。<br> 比如：<br> 博客所在仓库是：<a href="https://gitcafe.com/cwjcsu/cwjcsu" target="_blank" rel="external">https://gitcafe.com/cwjcsu/cwjcsu</a><br> 博客源码的分支是master：<a href="https://gitcafe.com/cwjcsu/cwjcsu/tree/master" target="_blank" rel="external">https://gitcafe.com/cwjcsu/cwjcsu/tree/master</a><br> 博客页面分支是gitcafe-pages：<a href="https://gitcafe.com/cwjcsu/cwjcsu/tree/gitcafe-pages" target="_blank" rel="external">https://gitcafe.com/cwjcsu/cwjcsu/tree/gitcafe-pages</a></p>
<p> 这两个分支与github上两个仓库代码是同一份，我又写了个脚本，用来实时push博客源码到两个仓库：blog/up.sh: (blog是博客源码所在目录)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line">git commit -am <span class="string">"<span class="variable">$1</span>"</span> </span><br><span class="line">git push github master:master </span><br><span class="line">git push gitcafe master:master</span><br></pre></td></tr></table></figure></p>
<p>blog/.git/config:<br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">    repositoryformatversion = <span class="number">0</span></span><br><span class="line">    filemode = <span class="keyword">false</span></span><br><span class="line">    bare = <span class="keyword">false</span></span><br><span class="line">    logallrefupdates = <span class="keyword">true</span></span><br><span class="line">    symlinks = <span class="keyword">false</span></span><br><span class="line">    ignorecase = <span class="keyword">true</span></span><br><span class="line">    hideDotFiles = dotGitOnly</span><br><span class="line"></span><br><span class="line">[remote <span class="string">"gitcafe"</span>]</span><br><span class="line">    url = git<span class="variable">@gitcafe</span>.<span class="symbol">com:</span>cwjcsu/cwjcsu.git</span><br><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/gitcafe/*</span></span><br><span class="line"></span><br><span class="line">[remote <span class="string">"github"</span>]</span><br><span class="line">    url = git<span class="variable">@github</span>.<span class="symbol">com:</span>cwjcsu/blog.git</span><br><span class="line">    fetch = +refs/heads/*<span class="symbol">:refs/remotes/github/*</span></span><br><span class="line">    </span><br><span class="line">[branch <span class="string">"master"</span>]</span><br><span class="line">    remote = github</span><br><span class="line">    merge = refs/heads/master</span><br></pre></td></tr></table></figure></p>
<p>[user]部分我没有贴出来。</p>
<h2 id="7,配置评论系统和百度统计">7,配置评论系统和百度统计</h2><p>我使用了国内很火的一个评论系统：<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>,注册、添加站点后，只需要把ID设置到hexo主题的_config.yml文件里面即可（注意不是hexo的配置文件而是themes/jacman/_config.yml，jacman是我使用的一个主题）。添加百度统计网上教程很多不赘述。</p>
]]></content>
    <summary type="html">
    <![CDATA[把hexo博客的源码和生成的页面实时同步到github和gitcafe。]]>
    
    </summary>
    
      <category term="blogs" scheme="http://debug4.me/tags/blogs/"/>
    
      <category term="github" scheme="http://debug4.me/tags/github/"/>
    
      <category term="hexo" scheme="http://debug4.me/tags/hexo/"/>
    
      <category term="工具" scheme="http://debug4.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Euler Problem 318 - Counting the number of consecutive nines at the beginning of the fractional part of (√p+√q)^2n]]></title>
    <link href="http://debug4.me/Project-Euler/PE318/"/>
    <id>http://debug4.me/Project-Euler/PE318/</id>
    <published>2015-10-10T07:40:11.000Z</published>
    <updated>2015-10-10T10:36:55.666Z</updated>
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=318" target="_blank" rel="external">Project Euler Problem 318</a> - 涉及二项式分解、接近整数、Pisot数等数学知识 ,<em>Completed on 2015-10-10  15:00</em><br><a id="more"></a></p>
<h2 id="原题">原题</h2><p>Consider the real number √2+√3.<br>When we calculate the even powers of √2+√3 we get:<br>(√2+√3)<sup>2</sup> = 9.898979485566356…<br>(√2+√3)<sup>4</sup> = 97.98979485566356…<br>(√2+√3)<sup>6</sup> = 969.998969071069263…<br>(√2+√3)<sup>8</sup> = 9601.99989585502907…<br>(√2+√3)<sup>10</sup> = 95049.999989479221…<br>(√2+√3)<sup>11</sup> = 940897.9999989371855…<br>(√2+√3)<sup>14</sup> = 9313929.99999989263…<br>(√2+√3)<sup>16</sup> = 92198401.99999998915…</p>
<p>It looks like that the number of consecutive nines at the beginning of the fractional part of these powers is non-decreasing.<br>In fact it can be proven that the fractional part of (√2+√3)<sup>2n</sup> approaches 1 for large n.</p>
<p>Consider all real numbers of the form √p+√q with p and q positive integers and p&lt;q, such that the fractional part of (√p+√q)<sup>2n</sup> approaches 1 for large n.</p>
<p>Let C(p,q,n) be the number of consecutive nines at the beginning of the f于actional part of<br>(√p+√q)<sup>2n</sup> = (p+q+2.√pq)<sup>2n</sup>,<br>(√p+√q)<sup>2n</sup> = (p+q+2.√pq)<sup>2n</sup>,</p>
<p>Let N(p,q) be the minimal value of n such that C(p,q,n) ≥ 2011.</p>
<p>Find ∑N(p,q) for p+q ≤ 2011.</p>
<h2 id="分析">分析</h2><p>题中的(√2+√3)<sup>2</sup>就是一个<a href="https://en.wikipedia.org/wiki/Pisot%E2%80%93Vijayaraghavan_number" target="_blank" rel="external">Pisot数</a>，它具有这个特点：<br>当n趋向无穷大的时候，它的n次方趋向一个整数，而它的共轭实数(√2-√3)<sup>2</sup>的n次方趋向0。而且这两个n次方数相加是一个整数。</p>
<h3 id="共轭实数"><a name="conjugates"></a> 共轭实数</h3><p>形如a+b√m和a-b√m的两个实数,叫做共轭实数。</p>
<h3 id="证明它们的n次方和是整数">证明它们的n次方和是整数</h3><p>对于p和q：<br>(√p+√q)<sup>2n</sup> = (p+q+2√pq)<sup>2n</sup>,<br>(√p-√q)<sup>2n</sup> = (p+q-2√pq)<sup>2n</sup>,<br>设a = p+q,b = 2√pq，<br>（这里a+b与a-b是<a href="#conjugates">共轭实数</a>，它们的小数部分相加等于1，现在证明它们的任意n次方和是整数）<br>则<br>(√p+√q)<sup>2n</sup> + (p+q-2√pq)<sup>2n</sup> = (a+b)<sup>n</sup>+(a-b)<sup>n</sup>,其中a是整数，b是实数，<br>根据二项式展开式可知，所有展开项中，b为偶数次方的都同号，b为奇数次方的都不同号（从而相减消除了），而b的偶数次方是整数，所以展开项相加也是整数。</p>
<h3 id="扩展-Fibonacci数">扩展-Fibonacci数</h3><p>Fibonacci数就是两个共轭实数的n次方和：<br>$$a_n = A \left(  { \frac {1 + \sqrt 5} 2 } \right) ^ n + B \left( { \frac {1 - \sqrt 5} 2 } \right) ^ n.$$</p>
<h3 id="|√p-√q|&lt;_1">|√p-√q|&lt; 1</h3><p>还有一个关键条件，就是必须满足|√p-√q|&lt; 1，即(a-b)&lt;1 才是上面几个结论成立的关键，也是解答本题的关键（证明还没有找到）。</p>
<h2 id="解题">解题</h2><p>为了使(√p+√q)<sup>2n</sup>的小数有2011或更多的9，那么(√p-√q)<sup>2n</sup>的小数就必须具有2011或更多的0（就是非常接近0），从而：<br>$$(\sqrt p - \sqrt q)^{2n}  \le 10 ^{-2011}$$<br>可以导出：<br>$$n \ge \frac{-2011}{2\lg(\sqrt q -\sqrt p)}$$</p>
<p>n取最小值：<br>$$n = ceil(\frac{-2011}{2\lg(\sqrt q -\sqrt p)})$$</p>
<p>于是，只需要循环p和q，寻找满足条件的 (a-b)&lt;1 的p、q对，然后计算n，并相加即可。</p>
<h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> t = System.nanoTime();</span><br><span class="line">    <span class="keyword">long</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">2011</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt; L; p++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = p + <span class="number">1</span>; q &lt; L - p + <span class="number">1</span>; q++) &#123;</span><br><span class="line">            <span class="keyword">double</span> c = p + q - <span class="number">2</span> * Math.<span class="built_in">sqrt</span>(p * q);</span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="number">1</span>) &#123;<span class="comment">// 等价于 (√q-√p) &lt; 1</span></span><br><span class="line">                s += Math.<span class="built_in">ceil</span>(-L / Math.<span class="built_in">log10</span>(c));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    System.out.println(<span class="string">"Time consumed "</span></span><br><span class="line">            + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - t) + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">709313889</span></span><br><span class="line">Time consumed <span class="number">22</span> ms</span><br></pre></td></tr></table></figure></p>
<h2 id="小结：">小结：</h2><p><a href="http://blog.dreamshire.com/project-euler-318-solution/" target="_blank" rel="external">参考1</a><br><a href="https://projecteuler.net/thread=318" target="_blank" rel="external">参考2-NickMcG</a><br><a href="https://en.wikipedia.org/wiki/Pisot%E2%80%93Vijayaraghavan_number" target="_blank" rel="external">Pisot–Vijayaraghavan_number</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[Project Euler Problem 318 - Counting the number of consecutive nines at the beginning of the fractional part of (√p+√q)^2n]]>
    
    </summary>
    
      <category term="Java" scheme="http://debug4.me/tags/Java/"/>
    
      <category term="Pisot数" scheme="http://debug4.me/tags/Pisot%E6%95%B0/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/tags/Project-Euler/"/>
    
      <category term="二项式" scheme="http://debug4.me/tags/%E4%BA%8C%E9%A1%B9%E5%BC%8F/"/>
    
      <category term="共轭实数" scheme="http://debug4.me/tags/%E5%85%B1%E8%BD%AD%E5%AE%9E%E6%95%B0/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/categories/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Euler Problem 455 - Powers With Trailing Digits]]></title>
    <link href="http://debug4.me/Project-Euler/PE455/"/>
    <id>http://debug4.me/Project-Euler/PE455/</id>
    <published>2015-10-10T01:40:11.000Z</published>
    <updated>2015-10-10T10:37:01.250Z</updated>
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=455" target="_blank" rel="external">Project Euler Problem 455 - Powers With Trailing Digits</a> ,<em>Completed on 2015-10-10  00:50</em><br><a id="more"></a></p>
<h2 id="原题">原题</h2><p>Let f(n) be the largest positive integer x less than 10<sup>9</sup> such that the last 9 digits of n<sup>x</sup> form the number x (including leading zeros), or zero if no such integer exists.</p>
<p>For example:</p>
<ul>
<li>f(4) = 411728896 (4<sup>411728896</sup> = …490411728896)</li>
<li>f(10) = 0</li>
<li>f(157) = 743757 (157<sup>743757</sup> = …567000743757)</li>
<li>Σf(n), 2 ≤ n ≤ 10<sup>3</sup> = 442530011399<br>Find Σf(n), 2 ≤ n ≤ 10<sup>6</sup>.</li>
</ul>
<h2 id="分析">分析</h2><p>设 f(n) = x，根据题意可得：<br>n<sup>x</sup>≡x(mod 10<sup>9</sup>)<br>也就是x满足：<br>x = powerMod(n,x,10<sup>9</sup>)  [1]<br>所以，为了求f(n)的值x，可以用穷举试探法，从 x = 0开始试探，直到找到满足[1]的x，或者x变成0；x每次递归取值为:<br>    x<sub>k+1</sub> = powerMod(n,  x<sub>k</sub>,  10<sup>9</sup>);<br>终止条件是：<br>    x<sub>k+1</sub> = x<sub>k</sub> or x<sub>k+1</sub>=0</p>
<h2 id="递推算法实现">递推算法实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 求f(n) = x，满足：</span><br><span class="line"> * （1）， n^x % 10^9 = x； or</span><br><span class="line"> * （2），x=0 如果不存在满足（1）的x </span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> m = (<span class="keyword">long</span>) Math.<span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> x = powerMod(n, k, m);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == x &amp;&amp; x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        k = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>powerMod是幂模运算的快速算法，参见<a href="/2015/10/09/PE188/#powerMod">蒙哥马利(Montgomery)幂模运算</a></p>
<h2 id="解决问题">解决问题</h2><p>从i=2到10<sup>9</sup>遍历相加f(i)得到结果：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 求f(n) = x，满足：</span><br><span class="line"> * （1）， n^x % 10^9 = x； or</span><br><span class="line"> * （2），x=0 如果不存在满足（1）的x </span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> m = (<span class="keyword">long</span>) Math.<span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> x = Util.powerMod(n, k, m);</span><br><span class="line">        <span class="keyword">if</span> (k == x || x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        k = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="输出">输出</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">450186511399999</span></span><br><span class="line">Time consumed : <span class="number">983</span> ms</span><br></pre></td></tr></table></figure>
<h2 id="小结">小结</h2><p>这个题目也用到了快速幂模运算，求解f(n)，理解f(n)=x对x进行迭代是解决问题的关键。</p>
]]></content>
    <summary type="html">
    <![CDATA[Project Euler Problem 455 -]]>
    
    </summary>
    
      <category term="Java" scheme="http://debug4.me/tags/Java/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/tags/Project-Euler/"/>
    
      <category term="幂模运算" scheme="http://debug4.me/tags/%E5%B9%82%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/categories/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Euler Problem 48 - 求大数的模]]></title>
    <link href="http://debug4.me/Project-Euler/PE48/"/>
    <id>http://debug4.me/Project-Euler/PE48/</id>
    <published>2015-10-09T11:36:36.000Z</published>
    <updated>2015-10-15T09:37:00.718Z</updated>
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=48" target="_blank" rel="external">Project Euler 48</a> ,获取大数 1^1 + 2^2 + … + 1000^1000 的最后10个数字<br><a id="more"></a></p>
<h2 id="暴力法">暴力法</h2><p>用[BigInteger]把这些数进行累加，并不会特别大（内存可hold住），见Java代码：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="label">static</span> <span class="keyword">String </span><span class="keyword">bruteForce(int </span>n) &#123;</span><br><span class="line">    <span class="keyword">BigInteger </span>S = <span class="keyword">BigInteger.ONE;</span><br><span class="line"></span>    <span class="keyword">BigInteger </span>Max = <span class="keyword">BigInteger.valueOf(n);</span><br><span class="line"></span>    for (<span class="keyword">BigInteger </span>i = <span class="keyword">BigInteger.valueOf(2); </span>i.compareTo(Max) &lt; <span class="number">0</span><span class="comment">; i = i.add(BigInteger.ONE)) &#123;</span></span><br><span class="line">        S = S.<span class="keyword">add(i.pow(i.intValue()));</span><br><span class="line"></span>    &#125;</span><br><span class="line">    <span class="keyword">String </span>s = S.toString(<span class="number">10</span>)<span class="comment">;</span></span><br><span class="line">    return s.<span class="keyword">substring(s.length() </span>- <span class="number">10</span>, s.length())<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用幂模运算规则">使用幂模运算规则</h2><p>有幂模运算规则：<br><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(a + b)</span> <span class="preprocessor">%</span> p = <span class="comment">(a % p + b % p)</span> <span class="preprocessor">%</span> p</span><br></pre></td></tr></table></figure></p>
<p>所以, (1<sup>1</sup>+ 2<sup>2</sup>+ … + 1000<sup>1000</sup>) % m = (1<sup>1</sup> % m + 2<sup>2</sup> % m + … + 1000<sup>1000</sup> % m) % m </p>
<p>用BigInteger实现<a href="http://cwjcsu.gitcafe.io/Project-Euler/PE188/#powerMod" target="_blank" rel="external">powerMod方法</a>：<br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">public static BigInteger powerMod(BigInteger <span class="keyword">n</span>, BigInteger p, BigInteger <span class="keyword">m</span>) &#123;</span><br><span class="line">    BigInteger r = <span class="keyword">n</span>.<span class="literal">mod</span>(<span class="keyword">m</span>);</span><br><span class="line">    BigInteger tmp = BigInteger.<span class="keyword">ONE</span>;</span><br><span class="line">    <span class="keyword">while</span> (p.compareTo(BigInteger.<span class="keyword">ONE</span>) &gt; 0) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((p.byteValue() &amp; 1) != 0) &#123;<span class="comment">// p 是奇数，则</span></span><br><span class="line">            tmp = (tmp.multiply(r)).<span class="literal">mod</span>(<span class="keyword">m</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r = r.multiply(r).<span class="literal">mod</span>(<span class="keyword">m</span>);</span><br><span class="line">        p = p.divide(BigInteger.valueOf(2L));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r.multiply(tmp).<span class="literal">mod</span>(<span class="keyword">m</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="实现PE48">实现PE48</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;<span class="comment">// 9110846700</span></span><br><span class="line">        <span class="keyword">long</span> s = System.nanoTime();</span><br><span class="line">         System.out.println(usePowerMod(<span class="number">1000</span>));</span><br><span class="line"><span class="comment">//      System.err.println(bruteForce(1000));</span></span><br><span class="line">        System.out.println(<span class="string">"time consumed : "</span> + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - s) + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">usePowerMod</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        BigInteger N = BigInteger.valueOf(n);</span><br><span class="line">        BigInteger S = BigInteger.ZERO;</span><br><span class="line">        BigInteger m = BigInteger.valueOf((<span class="keyword">long</span>) Math.<span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line">        <span class="keyword">for</span> (BigInteger i = BigInteger.ONE; i.compareTo(N) &lt;= <span class="number">0</span>; i = i.add(BigInteger.ONE)) &#123;</span><br><span class="line">            S = S.add(powerMod(i, i, m));</span><br><span class="line">        &#125;</span><br><span class="line">        S = S.mod(m);</span><br><span class="line">        String s = S.toString(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="输出">输出</h2><p>使用幂模运算规则的输出：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">9110846700</span></span><br><span class="line">time consumed : <span class="number">124</span> ms</span><br></pre></td></tr></table></figure></p>
<p>使用暴力法的输出：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">9110846700</span></span><br><span class="line">time consumed : <span class="number">89</span> ms</span><br></pre></td></tr></table></figure></p>
<h2 id="小结">小结</h2><p>发现暴力法速度更快，原因估计是powerMod(BigInteger,BigInteger,BigInteger)创建了太多的重量级BigInteger导致的。</p>
<ul>
<li>See also, <a href="/Project-Euler/PE188/">Project Euler 188 Solution: Find the last 8 digits of 1777↑↑1855.</a></li>
<li>See also, <a href="https://projecteuler.net/problem=97" target="_blank" rel="external">Project Euler 97 : Find the last ten digits of the non-Mersenne prime: 28433 × 2<sup>7830457</sup> + 1.</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Project Euler 48 - 求大数的模]]>
    
    </summary>
    
      <category term="Java" scheme="http://debug4.me/tags/Java/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/tags/Project-Euler/"/>
    
      <category term="幂模运算" scheme="http://debug4.me/tags/%E5%B9%82%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/categories/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Euler Problem 188-求超指数的最后8位-大数求余]]></title>
    <link href="http://debug4.me/Project-Euler/PE188/"/>
    <id>http://debug4.me/Project-Euler/PE188/</id>
    <published>2015-10-09T11:36:36.000Z</published>
    <updated>2015-10-10T10:36:46.202Z</updated>
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=188" target="_blank" rel="external">Project Euler 188</a> ,求超指数1777↑↑1855的最后8位。<em>Completed on 2013-04-28  11:27</em><br><a id="more"></a></p>
<h2 id="原题">原题</h2><p>The hyperexponentiation or tetration of a number <code>a</code> by a positive integer <code>b</code>, denoted by <code>a↑↑b</code> or <sup>b</sup>a, is recursively defined by:</p>
<p>a↑↑1 = a,<br>a↑↑(k+1) = a<sup>(a↑↑k)</sup>.</p>
<p>Thus we have e.g. 3↑↑2 = 3<sup>3</sup> = 27, hence 3↑↑3 = 3<sup>27</sup> = 7625597484987 and 3↑↑4 is roughly 103.6383346400240996*10^12.</p>
<p>Find the last 8 digits of 1777↑↑1855.</p>
<h2 id="分析">分析</h2><p>这个数必然是个天文数字，我机器上的整个硬盘也存不下它。求这个数T的最后8位数字，其实就是求<code>T mod 10^8</code>。有一个关于模运算的公式：<br>(A * B) % M = ( (A % M) * (B % M) )%M<br>从而:<br>A<sup>n</sup> % M = (A % M)<sup>n</sup> % M</p>
<h2 id="快速幂模运算_-_二分法">快速幂模运算 - 二分法</h2><h3 id="递归法">递归法</h3><p>实现 n<sup>p</sup> % m 的二分法求模算法如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">powerMod2</span><span class="params">(<span class="keyword">long</span> n, <span class="keyword">long</span> p, <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> tmp = <span class="number">1</span>;</span><br><span class="line">    tmp = powerMod2(n, p / <span class="number">2</span>, m);</span><br><span class="line">    tmp = tmp * tmp % m;</span><br><span class="line">    <span class="keyword">if</span> ((p &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        tmp = tmp * n % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解析：</p>
<ul>
<li>当p为奇数时：<br>n<sup>p</sup>%m = (n % m) <em> n<sup>p-1</sup> % m = r </em> n<sup>p-1</sup> % m ，此是p-1为偶数；</li>
<li>当p为偶数时：<br>  n<sup>p</sup> % m = n<sup>2k</sup> % m = (n<sup>k</sup> % m )<sup>2</sup> % m = tmp * tmp % m<br>  其中k = p/2,tmp = n<sup>k</sup> % m = powerMod2(n,k,m)</li>
</ul>
<h3 id="非递归法">非递归法</h3><p><a name="powerMod"></a>非递归的<a href="https://en.wikipedia.org/wiki/Modular_exponentiation, Right-to-left binary method" target="_blank" rel="external">蒙哥马利(Montgomery)幂模运算:</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">powerMod</span><span class="params">(<span class="keyword">long</span> n, <span class="keyword">long</span> p, <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> r = n % m;</span><br><span class="line">    <span class="keyword">long</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((p &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;<span class="comment">// p 是奇数，则</span></span><br><span class="line">            tmp = (tmp * r) % m;</span><br><span class="line">        &#125;</span><br><span class="line">        r = (r * r) % m;</span><br><span class="line">        p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (r * tmp) % m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决PE188">解决PE188</h2><h3 id="递归方法：">递归方法：</h3><p>a↑↑(k+1) % m = (a<sup>(a↑↑k)</sup>) % m = powMod(a,a↑↑k %m,m)<br>所以，对于模m的余数，每次用a % m 替换 a，(k+1)就可以降到k。从而得到代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">hyper_exp2</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> k, <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> powerMod(a, hyper_exp2(a, k - <span class="number">1</span>, m), m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="非递归方法：">非递归方法：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> s = System.nanoTime();</span><br><span class="line">    System.out.println(hyper_exp(<span class="number">1777</span>, <span class="number">1855</span>, <span class="number">100000000</span>));</span><br><span class="line">    System.out.println(<span class="string">"time consumed:"</span> + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - s) + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">hyper_exp</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> k, <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        temp = powerMod(a, temp, m);</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出">输出</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">95962097</span></span><br><span class="line">time consumed:<span class="number">8</span> ms</span><br></pre></td></tr></table></figure>
<h2 id="小结">小结</h2><ul>
<li>这个题目主要考察对a<sup>k</sup> % m 的快速幂模运算，采用了<a href="https://en.wikipedia.org/wiki/Modular_exponentiation" target="_blank" rel="external">Montgomery算法</a>。每做一次乘法，就可以对幂进行一次二分，从而快速运算出结果。这个算法也是RSA算法的核心部分。</li>
<li>See also, <a href="/2015/10/09/PE48">Project Euler 48 Solution: Find the last ten digits of 1^1 + 2^2 + … + 1000^1000.</a></li>
<li>See also, <a href="https://projecteuler.net/problem=97" target="_blank" rel="external">Project Euler 97 Solution: Find the last ten digits of the non-Mersenne prime: 28433 × 2<sup>7830457</sup> + 1.</a></li>
</ul>
<p><a href="http://blog.csdn.net/chen77716/article/details/7093600" target="_blank" rel="external">参考1-幂取模算法</a><br><a href="http://blog.dreamshire.com/project-euler-188-solution/" target="_blank" rel="external">参考2-</a><br><a href="https://en.wikipedia.org/wiki/Modular_exponentiation" target="_blank" rel="external">Montgomery算法</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Project Euler 188 - 求超指数的最后8位，幂模运算]]>
    
    </summary>
    
      <category term="Java" scheme="http://debug4.me/tags/Java/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/tags/Project-Euler/"/>
    
      <category term="幂模运算" scheme="http://debug4.me/tags/%E5%B9%82%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
    
      <category term="超指数" scheme="http://debug4.me/tags/%E8%B6%85%E6%8C%87%E6%95%B0/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/categories/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Euler Problem 206 - 寻找特定模式的数的平方根]]></title>
    <link href="http://debug4.me/Project-Euler/PE206/"/>
    <id>http://debug4.me/Project-Euler/PE206/</id>
    <published>2015-10-09T09:45:55.000Z</published>
    <updated>2015-10-10T10:36:51.793Z</updated>
    <content type="html"><![CDATA[<p><a href="https://projecteuler.net/problem=206" target="_blank" rel="external">Project Euler 206</a>,寻找特定模式(1_2_3_4_5_6_7_8_9_0)的数平方根，其中’_’是一个数字。<em>Completed on 2013-04-25  17:35</em><br><a id="more"></a></p>
<h2 id="分析">分析</h2><p>1_2_3_4_5_6_7_8_9_0格式的平方数，由于末尾是0，则平方根肯定是0结尾的，具有这个格式的最大数是：192939495969798990。由于平方根末尾是0，则这个数末尾必然是00，即这个数的格式为：1_2_3_4_5_6_7_8_900。</p>
<h2 id="穷举法">穷举法</h2><p>经过分析，可以从具有这个格式的最大数字19293949596979899开始往下搜索，如果确定是平方数，则找到了平方根。<br>这个数超过了long的范围，所以要用<a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html" target="_blank" rel="external"><code>BigInteger</code></a>。</p>
<h3 id="Java代码">Java代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> PE206 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s = System.nanoTime();</span><br><span class="line">        BigInteger N = <span class="keyword">new</span> BigInteger(<span class="string">"19293949596979899"</span>);</span><br><span class="line">        <span class="keyword">int</span> max = (<span class="keyword">int</span>) Math.<span class="built_in">sqrt</span>(N.doubleValue()) + <span class="number">1</span>;<span class="comment">//平方根可能的最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = max;; i--) &#123;</span><br><span class="line">            BigInteger I = BigInteger.valueOf(i);</span><br><span class="line">            I = I.<span class="built_in">pow</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (I.toString().matches(<span class="string">"1.2.3.4.5.6.7.8.9"</span>)) &#123;<span class="comment">//平方数匹配当前模式，则找到目标</span></span><br><span class="line">                System.out.println(i * <span class="number">10</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Time consumed "</span></span><br><span class="line">                + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - s) + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出">输出</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1389019170</span></span><br><span class="line">Time consumed <span class="number">68</span> ms</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[Project Euler 206 - 寻找特定模式(1_2_3_4_5_6_7_8_9_0)的数平方根]]>
    
    </summary>
    
      <category term="Java" scheme="http://debug4.me/tags/Java/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/tags/Project-Euler/"/>
    
      <category term="平方数" scheme="http://debug4.me/tags/%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
    
      <category term="Project Euler" scheme="http://debug4.me/categories/Project-Euler/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[joutable - Java格式化打印表格工具]]></title>
    <link href="http://debug4.me/My-Projects/joutable/"/>
    <id>http://debug4.me/My-Projects/joutable/</id>
    <published>2015-10-09T08:50:52.000Z</published>
    <updated>2015-10-12T02:46:49.863Z</updated>
    <content type="html"><![CDATA[<p>一个Java写的把简单表格格式化打印到控制台的工具，自动对齐和换行，可以定制标题填充字符、表头分隔字符。<a href="https://cwjcsu.github.io/joutable/" target="_blank" rel="external">Click Here to see more detail</a><br><a id="more"></a></p>
<h1 id="An_simple_and_pretty_formatted_Table_in_Java">An simple and pretty formatted Table in Java</h1><p>You may want to print out some simple table (with title,headers) to the console with a readable format,then joutable is your best choise.</p>
<h1 id="Usages">Usages</h1><h2 id="How_to_Use_joutable_?">How to Use joutable ?</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DefaultTable dt = <span class="keyword">new</span> DefaultTable();</span><br><span class="line">dt.setTitle(<span class="string">"Aacademic Record Table"</span>);</span><br><span class="line">dt.setHeaders(<span class="keyword">new</span> String[] &#123; <span class="string">"Id"</span>, <span class="string">"Name"</span>, <span class="string">"Grade"</span>, <span class="string">"Remark"</span> &#125;);</span><br><span class="line">dt.addRow(<span class="keyword">new</span> Object[] &#123; <span class="number">1001</span>, <span class="string">"Jack Bower"</span>, <span class="string">"A"</span>, <span class="string">"Good at fighting"</span> &#125;);</span><br><span class="line">dt.addRow(<span class="keyword">new</span> Object[] &#123; <span class="number">1002</span>, <span class="string">"Vincent Willem  Van Gogh"</span>, <span class="string">"A+"</span>,<span class="string">"Good at painting"</span> &#125;);</span><br><span class="line">dt.addRow(<span class="keyword">new</span> Object[] &#123; <span class="number">1003</span>, <span class="string">"Jone Doe"</span>, <span class="string">"B"</span>, <span class="string">"Noop"</span> &#125;);</span><br><span class="line">DefaultTableFormatter dtf = <span class="keyword">new</span> DefaultTableFormatter(<span class="number">100</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(dtf.format(dt));</span><br></pre></td></tr></table></figure>
<p>this will print a pretty formatted table :<br><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">===============</span> <span class="comment">Aacademic</span> <span class="comment">Record</span> <span class="comment">Table</span> <span class="comment">===============</span></span><br><span class="line"><span class="comment">Id</span>     <span class="comment">Name</span>                      <span class="comment">Grade</span>  <span class="comment">Remark</span>          </span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  </span><br><span class="line"><span class="comment">1001</span>   <span class="comment">Jack</span> <span class="comment">Bower</span>                <span class="comment">A</span>      <span class="comment">Good</span> <span class="comment">at</span> <span class="comment">fighting</span></span><br><span class="line"><span class="comment">1002</span>   <span class="comment">Vincent</span> <span class="comment">Willem</span>  <span class="comment">Van</span> <span class="comment">Gogh</span>  <span class="comment">A</span><span class="literal">+</span>     <span class="comment">Good</span> <span class="comment">at</span> <span class="comment">painting</span></span><br><span class="line"><span class="comment">1003</span>   <span class="comment">Jone</span> <span class="comment">Doe</span>                  <span class="comment">B</span>      <span class="comment">Noop</span></span><br></pre></td></tr></table></figure></p>
<p>You can customize the format: </p>
<ul>
<li>Padding char of the title;</li>
<li>Separating char between headers and body</li>
<li>Set <code>sort=true</code> to sort rows by the first column,by default</li>
<li>Set <code>minColumnWidth</code> to make column width to fill your need</li>
</ul>
<h2 id="Examples">Examples</h2><p>All the examples can be see at src/test/java/com/joutable/DefaultTableFormatterDemo.java</p>
<h3 id="A_long_title_table">A long title table</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"> <span class="comment">Longongongongongongongongongongongongongongongongongongongongongongongongongongongongongongong</span> <span class="comment">title</span> </span><br><span class="line"><span class="comment">Id</span>                        <span class="comment">Name</span>                      <span class="comment">Node</span>                      <span class="comment">Status</span>                  </span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  </span><br><span class="line"><span class="comment">id0</span>                       <span class="comment">Node0</span>                     <span class="comment">0sss</span>                      <span class="comment">Stopped</span>                 </span><br><span class="line"><span class="comment">id1</span>                       <span class="comment">Node1</span>                     <span class="comment">1sss</span>                      <span class="comment">Stopped</span>                 </span><br><span class="line"><span class="comment">id2</span>                       <span class="comment">Node2</span>                     <span class="comment">2sss</span>                      <span class="comment">Stopped</span></span><br></pre></td></tr></table></figure>
<h3 id="A_long_header_table">A long header table</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">=========================</span> <span class="comment">A</span> <span class="comment">title</span> <span class="comment">=========================</span></span><br><span class="line"><span class="comment">LLLLLLLLLLLLLLLLLLLLLLLLLLLlongHeader</span>  <span class="comment">Name</span>   <span class="comment">Node</span>   <span class="comment">Status</span> </span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  </span><br><span class="line"><span class="comment">id0</span>                                    <span class="comment">Node0</span>  <span class="comment">0sss</span>   <span class="comment">Stopped</span></span><br><span class="line"><span class="comment">id1</span>                                    <span class="comment">Node1</span>  <span class="comment">1sss</span>   <span class="comment">Stopped</span></span><br><span class="line"><span class="comment">id2</span>                                    <span class="comment">Node2</span>  <span class="comment">2sss</span>   <span class="comment">Stopped</span></span><br></pre></td></tr></table></figure>
<h3 id="A_table_with_column_wrapped">A table with column wrapped</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">======== Short wrapped column ========</span><br><span class="line">Id     Name         Node         Status </span><br><span class="line">-----  -----------  -----------  -------  </span><br><span class="line">id0    Node0        <span class="number">0</span>sss         Stopped</span><br><span class="line">id1    d2ps3oody01  <span class="number">1</span>sss6500491  Stopped</span><br><span class="line">                    <span class="number">34367211423</span>         </span><br><span class="line">                    <span class="number">0</span>                   </span><br><span class="line">id3    <span class="number">2</span>h5uqrp3jrz  <span class="number">3</span>sss9128827  Stopped</span><br><span class="line">       ns6bsynzz45  <span class="number">32113350427</span>         </span><br><span class="line">       pu3pxysa3    <span class="number">3</span>                   </span><br><span class="line">id4    <span class="number">0</span>n9412d76fn  <span class="number">4</span>sss7805302  Stopped</span><br><span class="line">       vd42a9sv3nt  <span class="number">45755729772</span>         </span><br><span class="line">       <span class="number">3</span>tivlli8eh4  <span class="number">3</span>                   </span><br><span class="line">       <span class="number">3</span>qb89a24</span><br></pre></td></tr></table></figure>
<h3 id="A_row-sorted_table">A row-sorted table</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> A sorted table </span><br><span class="line">Id       Name   </span><br><span class="line">-------  -------  </span><br><span class="line"><span class="number">1</span>        Node1  </span><br><span class="line"><span class="number">2</span>        Node2  </span><br><span class="line"><span class="number">2</span>        Node2X </span><br><span class="line"><span class="number">2</span>        Node2Y </span><br><span class="line"><span class="number">3</span>        Node3  </span><br><span class="line"><span class="number">4</span>        Node4</span><br></pre></td></tr></table></figure>
<h3 id="A_table_with_customed_indent">A table with customed indent</h3><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*   </span>A intent table </span><br><span class="line"><span class="bullet">*  </span>Id       Name   </span><br><span class="line"><span class="bullet">*  </span>-------  -------  </span><br><span class="line"><span class="bullet">*  </span>3        Node1  </span><br><span class="line"><span class="bullet">*  </span>1        Node1  </span><br><span class="line"><span class="bullet">*  </span>4        Node1  </span><br><span class="line"><span class="bullet">*  </span>2        Node1</span><br></pre></td></tr></table></figure>
<h3 id="A_table_with_arrow_padded_title">A table with arrow padded title</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; arrow padded title &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">Id     Name                         State                             </span><br><span class="line">-----  ---------------------------  ----------------------------------  </span><br><span class="line"><span class="number">1</span>      LOOOOOOOOOOOOOOOOOOOOOOOOng  LOOOOOOOOOOOOOOOOOOOOOOOOng column</span><br><span class="line"><span class="number">2</span>      Node2                        Running                           </span><br><span class="line"><span class="number">3</span>      Node3                        Running                           </span><br><span class="line"><span class="number">4</span>      Node4                        Running</span><br></pre></td></tr></table></figure>
<h3 id="A_table_with_custom_cell_format">A table with custom cell format</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">====== A date cell table ======</span><br><span class="line">Id     Name   Date               </span><br><span class="line">-----  -----  -------------------  </span><br><span class="line"><span class="number">1</span>      Node1  <span class="number">2015</span>-<span class="number">10</span>-<span class="number">09</span> <span class="number">22</span>:<span class="number">19</span>:<span class="number">02</span></span><br><span class="line"><span class="number">2</span>      Node2  <span class="number">2015</span>-<span class="number">10</span>-<span class="number">09</span> <span class="number">05</span>:<span class="number">41</span>:<span class="number">07</span></span><br><span class="line"><span class="number">3</span>      Node3  <span class="number">2015</span>-<span class="number">10</span>-<span class="number">09</span> <span class="number">23</span>:<span class="number">55</span>:<span class="number">13</span></span><br><span class="line"><span class="number">4</span>      Node4  Today</span><br></pre></td></tr></table></figure>
<h1 id="Support_Chinese">Support Chinese</h1><p>TODO 中文支持还有问题</p>
]]></content>
    <summary type="html">
    <![CDATA[一个Java写的把简单表格格式化打印到控制台的工具，自动对齐和换行，可以定制标题填充字符、表头分隔字符。]]>
    
    </summary>
    
      <category term="Java" scheme="http://debug4.me/tags/Java/"/>
    
      <category term="My Projects" scheme="http://debug4.me/tags/My-Projects/"/>
    
      <category term="joutable" scheme="http://debug4.me/tags/joutable/"/>
    
      <category term="My Projects" scheme="http://debug4.me/categories/My-Projects/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建Github博客容易走弯路的地方]]></title>
    <link href="http://debug4.me/%E5%B7%A5%E5%85%B7/tips-about-github-blog/"/>
    <id>http://debug4.me/工具/tips-about-github-blog/</id>
    <published>2015-09-27T15:40:51.000Z</published>
    <updated>2015-10-12T02:46:49.864Z</updated>
    <content type="html"><![CDATA[<p>本为介绍了hexo + pacman主题搭建github博客容易犯错的地方。<br><a id="more"></a></p>
<h1 id="搭建github博客之前必须了解的东西">搭建github博客之前必须了解的东西</h1><p>用搜索引擎搜索”github 博客”等关键字会出现大量很好的文章教小白一步步搭建。我这里列出一些容易走弯路指引。</p>
<h2 id="不一定要注册域名">不一定要注册域名</h2><p>很多文章都有介绍购买域名，并在根目录下配置CName文件，其实不一定要购买的。Github会给每个用户一个二级域名:<code>&lt;username&gt;.github.io</code>。这个二级域名下，你可以定制样式、404页面等等，记住最重要的一点：<strong>你创建的github的Repository name必须是<code>&lt;username&gt;.github.io</code></strong>,这样你只要在<strong>master</strong>分支上仓库根目录上push一个<code>index.html</code>，这个文件就可以通过<code>http://&lt;username&gt;.github.io</code>访问到。<br><code>&lt;username&gt;</code>是你的github用户名。</p>
<h2 id="仓库&lt;repoName&gt;的Github_Pages可以通过&lt;username&gt;-github-io/&lt;repoName&gt;访问">仓库<code>&lt;repoName&gt;</code>的Github Pages可以通过<code>&lt;username&gt;.github.io/&lt;repoName&gt;</code>访问</h2><h3 id="手工创建">手工创建</h3><p>很多博客都有介绍怎么建立github pages，你可以给你的任意仓库建立github pages，只是你必须把页面push到一个特定名字的分支：<strong>gh_pages</strong>。这样，这个分支里面的页面就可以通过<code>&lt;username&gt;.github.io/&lt;repoName&gt;</code>访问，<code>&lt;repoName&gt;</code>是这个仓库的名称。</p>
<h3 id="github向导创建">github向导创建</h3><p>使用github的向导创建Github Pages，你可以选择它提供的模版，github会在后台给你创建<strong>gh_pages</strong>分支，并把模版所需的css、JavaScript、images、fonts全部上传到这个分支里面，和你手工创建没有区别。<br>github向导创建的index.html等页面，对css等资源的引用采用的的相对路径，所以通过<code>&lt;username&gt;.github.io/&lt;repoName&gt;/</code>访问这个Pages不会出现资源的404错误，即使你修改了<code>&lt;username&gt;</code>。当然，有些链接是采用绝对路径，比如:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"downloads"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"https://github.com/&lt;username&gt;/&lt;repoName&gt;/zipball/master"</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这个链接是下载当前仓库master分支的zip文件，绝对路径里面包含<code>&lt;username&gt;</code>和<code>&lt;repoName&gt;</code>，所以如果你修改了用户名<code>&lt;usernmae&gt;</code>或者当前仓库的名称<code>&lt;repoName&gt;</code>，那么这个链接就失效了。</p>
<h2 id="Github_Pages也可以用hexo等进行定制">Github Pages也可以用<a href="https://hexo.io" target="_blank" rel="external">hexo</a>等进行定制</h2><p>网上很多文章都说用<strong>hexo+特定主题</strong>创建github+pages，会出现资源文件404错误，然后说可以去买个域名，创建CName映射文件解决问题。我在初次搭建github博客的时候，差点就下单买域名了,其实是不必要的。<br>在hexo的配置文件<code>_config.yml</code>里面修改配置:<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">## If your site <span class="keyword">is</span> <span class="keyword">put</span> in <span class="keyword">a</span> subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> <span class="built_in">and</span> root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line">ur<span class="variable">l:</span> cwjcsu.github.io</span><br><span class="line">roo<span class="variable">t:</span> /&lt;repoName&gt;/</span><br></pre></td></tr></table></figure></p>
<p>那么hexo就会在生成页面的时候，给所有导入的资源加上<code>/&lt;repoName&gt;/</code>，从而可以正确访问到仓库<code>&lt;repoName&gt;</code>里面的资源文件，这样就会显示正常。</p>
<h1 id="Tips_about_hexo_+_jacman">Tips about hexo + jacman</h1><ol>
<li>.yml配置项冒号和值之间要有空格</li>
<li><p>jacman主题的内置分享功能url没有用<code>http://</code>开头，导致分享不成功<br> 我修改了一下代码：themes/jacman/layout/_partial/after_footer.ejs:(大概第86行左右)</p>
 <figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">var <span class="variable">$this</span> = $(<span class="string">'.share'</span>),</span><br><span class="line"> url = <span class="variable">$this</span>.attr(<span class="string">'data-url'</span>);</span><br><span class="line"> <span class="keyword">if</span>(url.indexOf(<span class="string">'http://'</span>)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    url = <span class="string">'http://'</span> + url;</span><br><span class="line"> &#125;</span><br><span class="line"> var encodedUrl = encodeURIComponent(url),</span><br><span class="line"> title = <span class="variable">$this</span>.attr(<span class="string">'data-title'</span>),</span><br><span class="line"> tsina = <span class="variable">$this</span>.attr(<span class="string">'data-tsina'</span>),</span><br><span class="line"> description = <span class="variable">$this</span>.attr(<span class="string">'description'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些.md或者.html被hexo处理后出现中文乱码<br> 往往是.md或者.html文件使用的编码格式不是UTF-8，只需要把这些文件转换成UTF-8并保存就可以被hexo正常处理；</p>
</li>
<li><p>每篇文章的description属性会被hexo处理成description的meta，即：</p>
 <figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">title</span>: <span class="string">hexo你的博客</span></span><br><span class="line"><span class="attribute">date</span>: <span class="string">2013-11-22 17:11:54</span></span><br><span class="line"><span class="attribute">categories</span>: <span class="string">default</span></span><br><span class="line"><span class="attribute">tags</span>: <span class="string">[hexo]</span></span><br><span class="line"><span class="attribute">description</span>: <span class="string">你对本页的描述</span></span><br></pre></td></tr></table></figure>
<p> 处理之后会在html页面的&lt;head&gt;标签内生成：</p>
 <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;meta <span class="keyword">property</span>=<span class="string">"og:description"</span> content=<span class="string">"你对本页的描述"</span>&gt;</span><br></pre></td></tr></table></figure>
<p> 这个描述一般会在搜索引擎展示你的页面时出现。（SEO范畴）</p>
</li>
<li><p>使用hexo new page <em>pageName</em>会创建一个source/<em>pageName</em>目录，并在这里面创建一个index.md文件，这个页面可以通过<code>&lt;username&gt;.github.io/&lt;pageName&gt;</code>访问到。所以这个<em>pageName</em>不要与你的某个聚友Github Pages的仓库名称重复了。</p>
</li>
<li><p>使用<code>&lt;!--more--&gt;</code>标签可以让标签以上的文本作为摘要，在博客列表中显示出来，点击Read More显示特定博客有内容。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>本为介绍了hexo + pacman主题搭建github博客容易犯错的地方。<br>]]>
    
    </summary>
    
      <category term="blogs" scheme="http://debug4.me/tags/blogs/"/>
    
      <category term="hexo" scheme="http://debug4.me/tags/hexo/"/>
    
      <category term="jacman" scheme="http://debug4.me/tags/jacman/"/>
    
      <category term="工具" scheme="http://debug4.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown标准语法与GitHub Flavored Markdown语法大全]]></title>
    <link href="http://debug4.me/%E5%B7%A5%E5%85%B7/markdown-learning/"/>
    <id>http://debug4.me/工具/markdown-learning/</id>
    <published>2015-09-26T07:01:19.000Z</published>
    <updated>2015-10-12T02:46:49.864Z</updated>
    <content type="html"><![CDATA[<p>本文介绍了标准Markdown语法和GitHub Flavored Markdown (GFM)，并推荐了一款Markdown编辑器<br><a id="more"></a></p>
<h1 id="标准Markdwon语法">标准Markdwon语法</h1><p><strong>Markdown</strong>是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的HTML(或者pdf、docx)文档”。Markdown现在拥有非常多的扩展，而且标准化已经几乎不可能。有一个介绍标准化markdown的<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">网站</a>。里面的<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Syntax</a>详细介绍了标准markdown所有语法。</p>
<h2 id="块元素(Block_Elements)">块元素(Block Elements)</h2><h3 id="文档标头（HEADERS）">文档标头（HEADERS）</h3><p>有两种类型的标题：Setext-style headers  和 Atx-style headers。<br>（1），Setext-style headers 的markdwon代码：<br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">This is H1</span><br><span class="line">=</span><br><span class="line"><span class="header">This is H1</span><br><span class="line">---</span></span><br></pre></td></tr></table></figure></p>
<p>其中等于号(=)和破折号(-)的个数没有限制（好像要超过2个）。（效果免了，否则我这篇博客会被撑乱）。<br>（2），Atx-style headers 示例：<br><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is an H1</span></span><br><span class="line"><span class="comment">## This is an H2</span></span><br><span class="line"><span class="comment">###### This is an H6</span></span><br></pre></td></tr></table></figure></p>
<p>注意#号后面要加空格，当前文档使用的就是这种格式标题。另外  atx-style 的头可以关闭：<br><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is an H1 #</span></span><br><span class="line"><span class="comment">## This is an H2 ##</span></span><br><span class="line"><span class="comment">### This is an H6 ######</span></span><br></pre></td></tr></table></figure></p>
<h3 id="块引用(BLOCKQUOTES)">块引用(BLOCKQUOTES)</h3><p>markdown使用 &gt; 来做块引用（email-style quote）<br><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lo<span class="comment">rem ipsum dolor sit amet,</span></span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>Blockquotes可以只在段首使用 &gt; ,效果是一样的：<br><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lo<span class="comment">rem ipsum dolor sit amet,</span></span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br></pre></td></tr></table></figure></p>
<p>Blockquotes可以嵌套：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; This <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">first</span> level <span class="keyword">of</span> quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This <span class="keyword">is</span> nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back <span class="keyword">to</span> <span class="keyword">the</span> <span class="keyword">first</span> level.</span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>Back to the first level.</p>
</blockquote>
<p>Blockquotes里面可以嵌套其他markdown元素，包括headers,lits,code blocks等等：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#### This is a header.</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="number">1.</span>   This <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">first</span> <span class="type">list</span> <span class="property">item</span>.</span><br><span class="line">&gt; <span class="number">2.</span>   This <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">second</span> <span class="type">list</span> <span class="property">item</span>.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Here's <span class="keyword">some</span> example code:</span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="constant">return</span> shell_exec(<span class="string">"echo $input | $markdown_script"</span>);</span><br></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<blockquote>
<h4 id="This_is_a_header-">This is a header.</h4><ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol>
<p>Here’s some example code:</p>
<pre><code><span class="built_in">return</span> shell_<span class="built_in">exec</span>(<span class="string">"echo <span class="variable">$input</span> | <span class="variable">$markdown_script</span>"</span>);
</code></pre></blockquote>
<h3 id="列表">列表</h3><p>（1），无序列表使用星号(*,asterisks)<br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>Red</span><br><span class="line"><span class="bullet">* </span>Green</span><br></pre></td></tr></table></figure></p>
<p>等价于：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+ </span>Red</span><br><span class="line"><span class="bullet">+ </span>Green</span><br></pre></td></tr></table></figure></p>
<p>也等价于：<br><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"> <span class="constant">Red</span></span><br><span class="line"></span>-<span class="ruby"> <span class="constant">Green</span></span></span><br></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<ul>
<li>Red</li>
<li>Green<br>（2），有序列表使用数字：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Bird</span><br><span class="line"><span class="number">2.</span> McHale</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>可以写成：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Bird</span><br><span class="line"><span class="number">1.</span> McHale</span><br></pre></td></tr></table></figure></p>
<p>甚至<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">8.</span> Bird</span><br><span class="line"><span class="number">3.</span> McHale</span><br></pre></td></tr></table></figure></p>
<p>总之，只要是数字加一个点即可。效果如下：</p>
<ol>
<li>Bird</li>
<li>McHale<br>（3），列表默认都是从左边开始的，如果想加缩进，可以在前面加超过3个以上的空格。<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">*   Lo<span class="comment">rem ipsum dolor sit amet, consectetuer adipiscing elit.</span></span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    </span><br><span class="line">    viverra nec, fringilla <span class="flow">in</span>, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>效果是这样的：</p>
<ul>
<li><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</p>
<p>viverra nec, fringilla in, laoreet vitae, risus.</p>
</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>
<p>如果列表项之间有空行，markdown会给每一个生成的li元素创建一个p:<br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*   </span>Bird</span><br><span class="line"></span><br><span class="line"><span class="bullet">*   </span>Magic</span><br></pre></td></tr></table></figure></p>
<p>产生的DOM是:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Bird<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Magic<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>（4），在列表之中使用blockquote，需要有缩进：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">*   A <span class="type">list</span> <span class="property">item</span> <span class="keyword">with</span> a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This <span class="keyword">is</span> a blockquote</span><br><span class="line">    &gt; inside a <span class="type">list</span> <span class="property">item</span>.</span><br></pre></td></tr></table></figure></p>
<p>效果是这样的：</p>
<ul>
<li><p>A list item with a blockquote:</p>
<blockquote>
<p>This is a blockquote<br>inside a list item.</p>
</blockquote>
</li>
</ul>
<p>（5），列表项中放入代码块，代码库必须要缩进8个空格（或者2个tab）：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">*   A list <span class="keyword">item </span>with a <span class="preprocessor">code</span> <span class="keyword">block:</span><br><span class="line"></span></span><br><span class="line">        &lt;<span class="preprocessor">code</span> goes here&gt;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li><p>A list item with a code block:</p>
<pre><code>&lt;<span class="tag">code</span> goes here&gt;
</code></pre></li>
</ul>
<p>（6），因为一个段落有数字开头，从而创建了一个有序列表时，可以用下面的方式避免：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1986</span>. What <span class="tag">a</span> great season.</span><br></pre></td></tr></table></figure></p>
<p>写成：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1986</span>\. What <span class="tag">a</span> great season.</span><br></pre></td></tr></table></figure></p>
<p>1986. What a great season.</p>
<h3 id="代码块（CODE_BLOCKS）">代码块（CODE BLOCKS）</h3><p>（1），html中代码块是被&lt;code&gt;或者&lt;pre&gt;等标签包裹的，在markdwon里面，只需要在代码库开头空一行，代码行缩进4个空格（一个tab）即可。<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">This is <span class="tag">a</span> <span class="attribute">normal</span> paragraph:</span><br><span class="line"></span><br><span class="line">    This is <span class="tag">a</span> <span class="tag">code</span> block.</span><br></pre></td></tr></table></figure></p>
<p>markdown会生成：<br><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="variable">&lt;p&gt;</span>This is a normal paragraph:<span class="variable">&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;pre&gt;</span><span class="variable">&lt;code&gt;</span>This is a code <span class="built_in">block</span>.</span><br><span class="line"><span class="variable">&lt;/code&gt;</span><span class="variable">&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>This is a normal paragraph:</p>
<pre><code>This is <span class="tag">a</span> <span class="tag">code</span> block.
</code></pre><p>生成的html会把每个代码行的移除4个空格（或者一个tab）：<br>代码：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Here <span class="keyword">is</span> an example <span class="keyword">of</span> <span class="constant">AppleScript</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">tell</span> <span class="type">application</span> <span class="string">"Foo"</span></span><br><span class="line">        <span class="command">beep</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">tell</span></span><br></pre></td></tr></table></figure></p>
<p>会被解析成：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Here <span class="keyword">is</span> an example <span class="keyword">of</span> <span class="constant">AppleScript</span>:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;&lt;code&gt;<span class="keyword">tell</span> <span class="type">application</span> <span class="string">"Foo"</span></span><br><span class="line">    <span class="command">beep</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>
<p>代码块会一直继续，直到遇到一个没有缩进的行或者文档末尾。<br>（2），在代码块内部，这几个符号：&amp;、&lt; 、 &gt;都会被自动转义，比如：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"footer"</span>&gt;</span><br><span class="line">    &amp;<span class="keyword">copy</span>; <span class="number">2004</span> Foo Corporation</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>会变成：<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">pre</span>&gt;&lt;code&gt;&amp;<span class="keyword">lt</span>;div class=<span class="string">"footer"</span>&amp;gt;</span><br><span class="line">    &amp;amp;<span class="built_in">copy</span>; <span class="number">2004</span> Foo Corporation</span><br><span class="line">&amp;<span class="keyword">lt</span>;/div&amp;gt;</span><br><span class="line">&lt;/code&gt;&lt;/<span class="keyword">pre</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>效果如下：<br>    <div class="footer"><br>        &copy; 2004 Foo Corporation<br>    </div></p>
<p>其他markdwon字符在代码块中不会被处理，比如*。</p>
<h3 id="水平规则（HORIZONTAL_RULES）">水平规则（HORIZONTAL RULES）</h3><p>可以通过在一行写3个以上的 来产生一条水平线<br><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p>
<p>效果如下：（只取了有一条）</p>
<hr>
<h2 id="SPAN元素（SPAN_ELEMENTS）">SPAN元素（SPAN ELEMENTS）</h2><h3 id="链接(Links)">链接(Links)</h3><p>markdwon支持两种类型的链接:<em>inline and reference</em>，两种链接都用中括号[]界定。<br>（1）inline链接：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is [<span class="link_label">an example</span>](<span class="link_url">http://example.com/ "Title"</span>) inline link.</span><br><span class="line"></span><br><span class="line">[<span class="link_label">This link</span>](<span class="link_url">http://example.net/</span>) has no title attribute.</span><br></pre></td></tr></table></figure></p>
<p>效果是这样的：<br>This is <a href="http://example.com/" title="Title" target="_blank" rel="external">an example</a> inline link.</p>
<p><a href="http://example.net/" target="_blank" rel="external">This link</a> has no title attribute.<br>引用本地资源（在同一台服务器上的）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">See my [<span class="link_label">About</span>](<span class="link_url">/about/</span>) page for details.</span><br></pre></td></tr></table></figure>
<p>See my <a href="/about/">About</a> page for details. </p>
<p>（2），引用连接(Reference-style)使用一个后置的中括号<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">This <span class="keyword">is</span> [an example] [<span class="property">id</span>] <span class="keyword">reference</span>-style link.</span><br></pre></td></tr></table></figure></p>
<p>效果是这样的：<br>This is <a href="http://example.com/" title="Optional Title Here" target="_blank" rel="external">an example</a> reference-style link.<br>然后文档中的任何其他地方可以这样定义被引用的链接：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr_selector">[id]</span>: <span class="rule"><span class="attribute">http</span>:<span class="value">//example.com/  <span class="string">"Optional Title Here"</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>这个markdwon标签不会产生html，所以不会显示（链接的定义支队markdwon解析有效，不会生成html）。</p>
<p>下面三种引用链接的定义方式等价：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="link_reference">foo</span>]:<span class="link_url"> http://example.com/  "Optional Title Here"</span></span><br><span class="line">[<span class="link_reference">foo</span>]:<span class="link_url"> http://example.com/  'Optional Title Here'</span></span><br><span class="line">[<span class="link_reference">foo</span>]:<span class="link_url"> http://example.com/  (Optional Title Here)</span></span><br></pre></td></tr></table></figure></p>
<p>其中[id]可以包含数字、字母、空格、标点符号，但是大小写不敏感。</p>
<p>（3），可以隐性定义引用链接：（链接的Label用作id）<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">I get 10 times more traffic from [<span class="link_label">Google</span>][<span class="link_reference"></span>] than from</span><br><span class="line">[<span class="link_label">Yahoo</span>][<span class="link_reference"></span>] or [<span class="link_label">MSN</span>][<span class="link_reference"></span>].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        "Google"</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"</span><br><span class="line">  [msn]:    http://search.msn.com/    "MSN Search"</span><br></pre></td></tr></table></figure></p>
<p>效果如下：<br>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="external">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="external">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="external">MSN</a>.</p>
<h3 id="强调（EMPHASIS）">强调（EMPHASIS）</h3><p>markdown把用*和下划线_包裹的文本作为强调文本：<br><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">*</span>单星<span class="keyword">*</span></span><br><span class="line">_单下划线_</span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span>双星<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">__双下划线__</span><br></pre></td></tr></table></figure></p>
<p>效果如下：<br><em>单星</em><br><em>单下划线</em><br><strong>双星</strong><br><strong>双下划线</strong><br>强调可以加载文字中间：<br><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">un<span class="keyword">*</span>frigging<span class="keyword">*</span>believable</span><br></pre></td></tr></table></figure></p>
<p>效果是：<br>un<em>frigging</em>believable<br>要书写字面量*，则需要用反斜杠:<br><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\*this</span> text <span class="keyword">is</span> surrounded <span class="keyword">by</span> literal asterisks<span class="string">\*</span></span><br></pre></td></tr></table></figure></p>
<p>*this text is surrounded by literal asterisks*</p>
<h3 id="代码（CODE）">代码（CODE）</h3><p>使用反引号（backtick,`)来包裹一段代码：Use the <code>printf()</code> function.<br><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Use</span> the `printf()` <span class="function"><span class="keyword">function</span>.</span></span><br></pre></td></tr></table></figure></p>
<p>为了在代码中使用反引号字面量，可以用多个反引号包裹代码：<br><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="escape">``</span>There is <span class="literal">a</span> literal backtick (<span class="escape">`)</span> here.<span class="escape">``</span></span><br></pre></td></tr></table></figure></p>
<p>上面代码示例在我的markdwon源文件里面是用三个反引号包裹的，它产生html：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">code</span>&gt;</span>There is a literal backtick (`) here.<span class="tag">&lt;/<span class="title">code</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在code span中，这几个符号：&amp;、&lt; 、 &gt;都会被自动转义成（同代码块）<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Please don't <span class="operator"><span class="keyword">use</span> <span class="keyword">any</span> <span class="string">`&lt;blink&gt;`</span> tags.</span></span><br></pre></td></tr></table></figure></p>
<p>会被转义成：<br><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="variable">&lt;p&gt;</span>Please don't use <span class="literal">any</span> <span class="variable">&lt;code&gt;</span>&amp;lt;blink&amp;gt;<span class="variable">&lt;/code&gt;</span> tags.<span class="variable">&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="图片（IMAGES）">图片（IMAGES）</h3><p>markdwon中有两种图片的标签：<em>inline and reference</em>。<br>Inline图片语法是这样的：（注意惊叹号，中括号中指定图片的<code>alt</code>属性，小括号是图片的URL外加一个可选的<code>title</code>属性）<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="link_label">Alt text</span>](<span class="link_url">/path/to/img.jpg</span>)</span><br><span class="line">![<span class="link_label">Alt text</span>](<span class="link_url">/path/to/img.jpg "Optional title"</span>)</span><br></pre></td></tr></table></figure></p>
<p>Reference-style图片语法是这样的：（同样是惊叹号，中括号中指定图片的<code>alt</code>属性，又一个中括号指定引用id）<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="link_label">Alt text</span>][<span class="link_reference">id</span>]</span><br></pre></td></tr></table></figure></p>
<p>图片引用这么写：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">[<span class="property">id</span>]: url/<span class="keyword">to</span>/image  <span class="string">"Optional title attribute"</span></span><br></pre></td></tr></table></figure></p>
<p>markdown中无法指定图片的尺寸，如果尺寸很重要的话，可以直接使用&lt;img&gt;标签。</p>
<h2 id="杂项（Miscellaneous）">杂项（Miscellaneous）</h2><h3 id="自动链接（AUTOMATIC_LINKS）">自动链接（AUTOMATIC LINKS）</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&lt;<span class="string">http:</span><span class="comment">//example.com/&gt;</span></span><br></pre></td></tr></table></figure>
<p>产生：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="tag">a</span> href=<span class="string">"http://example.com/"</span>&gt;http:<span class="comment">//example.com/&lt;/a&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：<a href="http://example.com/" target="_blank" rel="external">http://example.com/</a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;address@example.com&gt;</span></span><br></pre></td></tr></table></figure>
<p>产生：<br><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;</span><br><span class="line">&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;</span><br><span class="line">&amp;#109;"</span>&gt;&amp;<span class="title">#x61</span>;&amp;<span class="title">#x64</span>;&amp;<span class="title">#x64</span>;&amp;<span class="title">#x72</span>;&amp;<span class="title">#x65</span>;&amp;<span class="title">#115</span>;&amp;<span class="title">#115</span>;&amp;<span class="title">#64</span>;&amp;<span class="title">#101</span>;&amp;<span class="title">#120</span>;&amp;<span class="title">#x61</span>;</span><br><span class="line">&amp;<span class="title">#109</span>;&amp;<span class="title">#x70</span>;&amp;<span class="title">#x6</span>C;e&amp;<span class="title">#x2</span>E;&amp;<span class="title">#99</span>;&amp;<span class="title">#111</span>;&amp;<span class="title">#109</span>;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<p><a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x61;&#100;&#100;&#114;&#x65;&#115;&#115;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#x6f;&#x6d;">&#x61;&#100;&#100;&#114;&#x65;&#115;&#115;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#x6f;&#x6d;</a></p>
<h3 id="反斜线（BACKSLASH_ESCAPES）">反斜线（BACKSLASH ESCAPES）</h3><p>markdwon可以用反斜杠来生成一些字面量：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">\   <span class="keyword">backslash</span><br><span class="line"></span>`   <span class="keyword">backtick</span><br><span class="line"></span>*   asterisk</span><br><span class="line">_   underscore</span><br><span class="line">&#123;&#125;  curly <span class="keyword">braces</span><br><span class="line"></span>[]  square <span class="keyword">brackets</span><br><span class="line"></span>()  parentheses</span><br><span class="line">#   hash <span class="keyword">mark</span><br><span class="line"></span>+   plus sign</span><br><span class="line">-   minus sign (hyphen)</span><br><span class="line">.   dot</span><br><span class="line">!   exclamation <span class="keyword">mark</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p>\<br>`<br>*<br>_<br>{}<br>[]<br>()<br>#<br>+<br>-<br>.<br>!</p>
<h3 id="锚点">锚点</h3><p>（1）标题默认做锚点。<br>使用<br><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">## HeaderName</span></span><br></pre></td></tr></table></figure></p>
<p>生成的标题都会用一个<code>id=&quot;HeaderName&quot;</code>的元素包裹。同一页面可以用这样引用：<code>[link text](#HeaderName)</code>，其他页面可以这样引用：<code>[link text](http://...#HeaderName)</code>。<br>也可以直接使用<code>[Header Name][]</code>引用这个标题。</p>
<p>（2）使用<code>&lt;a name=&quot;abcd&quot;&gt;&lt;/a&gt;</code>创建锚点：<br><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">#### &lt;<span class="literal">a</span> name=<span class="string">"header1234"</span>&gt;&lt;/<span class="literal">a</span>&gt;<span class="literal">A</span> Heading in this SO entry!</span><br></pre></td></tr></table></figure></p>
<p>produces:</p>
<h4 id="A_Heading_in_this_SO_entry!"><a name="header1234"></a>A Heading in this SO entry!</h4><p>然后可以通过下面的方式链接到这里：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Click [<span class="link_label">Here</span>](<span class="link_url">#header1234</span>) to link</span><br></pre></td></tr></table></figure>
<p>Click <a href="#header1234">Here</a> to link<br>  也可以使用<code>&lt;a id=&quot;abcd&quot;&gt;&lt;/a&gt;</code>创建锚点，但不推荐，原因看<a href="http://stackoverflow.com/a/7335259/57171" target="_blank" rel="external">这里</a></p>
<p><a href="#MultiMarkdownOverview">链接到标题锚点</a></p>
<h1 id="GitHub_Flavored_Markdown">GitHub Flavored Markdown</h1><p><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">GitHub Flavored Markdown</a>(缩写为GFM)是标准markdwon的一个扩展集，在github上面大放异彩。</p>
<h2 id="与传统Markdwon的区别">与传统Markdwon的区别</h2><h3 id="文字中的下划线">文字中的下划线</h3><p>Markdown会把下划线(<code>_</code>)包裹的文本转换成斜体，但GFM会忽略文字中的下划线，比如：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wow_great_stuff</span><br><span class="line"><span class="keyword">do</span>_this_and_<span class="keyword">do</span>_that_and_another_thing.</span><br></pre></td></tr></table></figure></p>
<p>如果需要强调时，请用星号(<code>*</code>)</p>
<h3 id="URL自动链接">URL自动链接</h3><p>GFM对标准的URLs会自动生成链接，比如：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//example.com</span></span><br></pre></td></tr></table></figure></p>
<p>会变成：<br><a href="http://example.com" target="_blank" rel="external">http://example.com</a></p>
<h3 id="中划线（Strikethrough)">中划线（Strikethrough)</h3><p>GFM添加了中划线的语法：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">~~Mistaken <span class="type">text</span>.~~</span><br></pre></td></tr></table></figure></p>
<p>变成：<br><del>Mistaken text.</del></p>
<h3 id="包裹的代码块（Fenced_code_blocks）">包裹的代码块（Fenced code blocks）</h3><p>标准Markdown中用空行，4个空格（或tab）缩进来代表代码块，GFM使用三个反引号包裹代码块(```)</p>
<h3 id="语法高亮（Syntax_highlighting）">语法高亮（Syntax highlighting）</h3><p>下面代码是一段ruby的代码：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'redcarpet'</span></span><br><span class="line">markdown = <span class="constant">Redcarpet</span>.new(<span class="string">"Hello World!"</span>)</span><br><span class="line">puts markdown.to_html</span><br></pre></td></tr></table></figure>
<h3 id="表格（Tables）">表格（Tables）</h3><p>用破折号隔离表头和表体，用pipe(|) 隔离每一列：<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">First</span> Header  | Second Header</span><br><span class="line">------------- | -------------</span><br><span class="line">Content <span class="keyword">Cell</span>  | Content <span class="keyword">Cell</span></span><br><span class="line">Content <span class="keyword">Cell</span>  | Content <span class="keyword">Cell</span></span><br></pre></td></tr></table></figure></p>
<p>效果：（要加空行）</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<p>也可以更加美观：<br><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string"> First Header  </span>|<span class="string"> Second Header </span>|</span><br><span class="line">|<span class="string"> ------------- </span>|<span class="string"> ------------- </span>|</span><br><span class="line">|<span class="string"> Content Cell  </span>|<span class="string"> Content Cell  </span>|</span><br><span class="line">|<span class="string"> Content Cell  </span>|<span class="string"> Content Cell  </span>|</span><br></pre></td></tr></table></figure></p>
<p>注意，破折号的长度不需要匹配表头长度：<br><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string"> Name </span>|<span class="string"> Description          </span>|</span><br><span class="line">|<span class="string"> ------------- </span>|<span class="string"> ----------- </span>|</span><br><span class="line">|<span class="string"> Help      </span>|<span class="string"> Display the help window.</span>|</span><br><span class="line">|<span class="string"> Close     </span>|<span class="string"> Closes a window     </span>|</span><br></pre></td></tr></table></figure></p>
<p>可以在单元格里面使用内联Markdown标签：链接、粗体、斜体、中划线，等：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://example.com" target="_blank" rel="external">Help</a></td>
<td><del>Display the</del> help window.</td>
</tr>
<tr>
<td>Close</td>
<td><em>Closes</em> a window</td>
</tr>
</tbody>
</table>
<p>可以用冒号（:）来定义列的对其方式：<br><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">| <span class="constant">Left</span>-<span class="constant">Aligned</span>  | <span class="constant">Center</span> <span class="constant">Aligned</span>  | <span class="constant">Right</span> <span class="constant">Aligned</span> |</span><br><span class="line">| <span class="symbol">:------------</span> |<span class="symbol">:---------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span></span><br><span class="line">| col <span class="number">3</span> is      | some wordy text | <span class="variable">$1600</span> |</span><br><span class="line">| col <span class="number">2</span> is      | centered        |   <span class="variable">$12</span> |</span><br><span class="line">| zebra stripes | are neat        |    <span class="variable">$1</span> |</span><br></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Left-Aligned</th>
<th style="text-align:center">Center Aligned</th>
<th style="text-align:right">Right Aligned</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">col 3 is</td>
<td style="text-align:center">some wordy text</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td style="text-align:left">col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td style="text-align:left">zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<h3 id="HTML">HTML</h3><p>可以使用一个HTML的子集，所有支持的标签和属性可以在<a href="https://github.com/github/markup" target="_blank" rel="external">github/markup repository</a>找到。</p>
<h2 id="扩展阅读">扩展阅读</h2><p><a href="https://help.github.com/articles/writing-on-github/" target="_blank" rel="external">“Writing on GitHub”</a></p>
<h1 id="Markdown编辑器推荐">Markdown编辑器推荐</h1><p>目前为止，我使用Markdown体验最好的是:<a href="http://www.sublimetext.com/3" target="_blank" rel="external">Sublime Text 3</a> + <strong>Markdown Editing</strong>,<a href="http://www.cnblogs.com/IPrograming/p/Sublime-markdown-editor.html" target="_blank" rel="external">这里有篇文章介绍</a>，基本的Markdown标签都是所见即所得的：<br><img src="http://images.cnitblog.com/blog2015/294941/201504/251326002036398.png" alt="示例图片"></p>
<p>另外，我也试过Webstorm和eclipse的插件，感觉没那么好用，最大的区别就是，这些工具都有两个窗口：一个源码Editor窗口，一个Preview窗口。</p>
<p>webstorm<br><a href="http://blog.fens.me/webstorm-markdown/" target="_blank" rel="external">http://blog.fens.me/webstorm-markdown/</a></p>
<p>eclipse plugin 编辑和查看：<br><a href="https://github.com/winterstein/Eclipse-Markdown-Editor-Plugin" target="_blank" rel="external">https://github.com/winterstein/Eclipse-Markdown-Editor-Plugin</a><br><a href="http://marketplace.eclipse.org/content/markdown-text-editor" target="_blank" rel="external">http://marketplace.eclipse.org/content/markdown-text-editor</a><br><a href="http://marketplace.eclipse.org/content/github-flavored-markdown-viewer-plugin-eclipse" target="_blank" rel="external">http://marketplace.eclipse.org/content/github-flavored-markdown-viewer-plugin-eclipse</a></p>
<p><strong>当然sublime text 3 + Markdown Editing 配合 hexo 是目前我采用的方式。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[介绍了标准Markdown语法和GitHub Flavored Markdown (GFM)，并推荐了一款Markdown编辑器]]>
    
    </summary>
    
      <category term="markdown" scheme="http://debug4.me/tags/markdown/"/>
    
      <category term="工具" scheme="http://debug4.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="工具" scheme="http://debug4.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一篇日志]]></title>
    <link href="http://debug4.me/%E5%B7%A5%E5%85%B7/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%97%A5%E5%BF%97/"/>
    <id>http://debug4.me/工具/第一篇日志/</id>
    <published>2015-09-25T11:14:17.000Z</published>
    <updated>2015-09-28T02:20:38.873Z</updated>
    <content type="html"><![CDATA[<p>这是<strong>新的开始</strong>，我用hexo创建了第一篇文章。</p>
<p>通过下面的命令，就可以创建新文章<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\workspace\javascript\nodejs-hexo&gt;hexo new 新的开始</span><br><span class="line">[info] File created at D:\workspace\javascript\nodejs-hexo\<span class="built_in">source</span>\_posts\新的开始.md</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>感觉非常好。</p>
<p>在命令行，启动服务器:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\workspace\javascript\nodejs-hexo&gt;hexo server</span><br><span class="line">[info] Hexo is running at http://localhost:<span class="number">4000</span>/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p>
<p>通过浏览器打开， <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，就出现了我们新写的文章。</p>
<h2 id="引用">引用</h2><blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote>
<h2 id="代码块">代码块</h2><figure class="highlight cpp"><figcaption><span>.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="external">Underscore.js</a></figcaption><table><tr><td class="code"><pre><span class="line">.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, ‘’, <span class="number">3</span>]);</span><br><span class="line">=&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h2 id="链接">链接</h2><a href="http://cwjcsu.github.io" title="粉丝日志" target="_blank">粉丝日志</a>
<h2 id="数学公式">数学公式</h2><p>$$J_\alpha(x)=\sum _{m=0}^\infty \frac{(-1)^ m}{m! \, \Gamma (m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha }$$</p>
<h2 id="图片">图片</h2><p><img src="http://7xn1o8.com1.z0.glb.clouddn.com/banner.jpg" alt="猜一猜这是哪里？"></p>
<p>TODO</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是<strong>新的开始</strong>，我用hexo创建了第一篇文章。</p>
<p>通过下面的命令，就可以创建新文章<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\workspace\javascript\nodejs-hexo&gt;hexo new 新的开始</span><br><span class="line">[info] File created at D:\workspace\javascript\nodejs-hexo\<span class="built_in">source</span>\_posts\新的开始.md</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Get Started" scheme="http://debug4.me/tags/Get-Started/"/>
    
      <category term="hexo" scheme="http://debug4.me/tags/hexo/"/>
    
      <category term="jacman" scheme="http://debug4.me/tags/jacman/"/>
    
      <category term="工具" scheme="http://debug4.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hell World]]></title>
    <link href="http://debug4.me/%E5%B7%A5%E5%85%B7/hello-world/"/>
    <id>http://debug4.me/工具/hello-world/</id>
    <published>2015-09-25T11:14:17.000Z</published>
    <updated>2015-09-28T02:20:38.836Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
      <category term="Get Started" scheme="http://debug4.me/tags/Get-Started/"/>
    
      <category term="hexo" scheme="http://debug4.me/tags/hexo/"/>
    
      <category term="jacman" scheme="http://debug4.me/tags/jacman/"/>
    
      <category term="工具" scheme="http://debug4.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
